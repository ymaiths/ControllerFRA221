
Lab_elec_01_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c8c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003e6c  08003e6c  00013e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ee0  08003ee0  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08003ee0  08003ee0  00013ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ee8  08003ee8  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ee8  08003ee8  00013ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eec  08003eec  00013eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08003ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  200000a0  08003f90  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08003f90  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c73d  00000000  00000000  00020113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d7e  00000000  00000000  0002c850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a10  00000000  00000000  0002e5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ad  00000000  00000000  0002efe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000257ad  00000000  00000000  0002f78d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c969  00000000  00000000  00054f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb176  00000000  00000000  000618a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f98  00000000  00000000  0014ca1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0014f9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000a0 	.word	0x200000a0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003e54 	.word	0x08003e54

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000a4 	.word	0x200000a4
 800021c:	08003e54 	.word	0x08003e54

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fb8b 	bl	8000cda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f816 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f8aa 	bl	8000720 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005cc:	f000 f85e 	bl	800068c <MX_LPUART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint32_t BTMX_TimeStamp = 0;
	  if(HAL_GetTick() > BTMX_TimeStamp)
 80005d0:	f000 fbe8 	bl	8000da4 <HAL_GetTick>
 80005d4:	4602      	mov	r2, r0
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <main+0x34>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	429a      	cmp	r2, r3
 80005dc:	d9f8      	bls.n	80005d0 <main+0x14>
	  {
		  BTMX_TimeStamp = HAL_GetTick()+25;
 80005de:	f000 fbe1 	bl	8000da4 <HAL_GetTick>
 80005e2:	4603      	mov	r3, r0
 80005e4:	3319      	adds	r3, #25
 80005e6:	4a02      	ldr	r2, [pc, #8]	; (80005f0 <main+0x34>)
 80005e8:	6013      	str	r3, [r2, #0]
		  ButtonMatrixRead();
 80005ea:	f000 f951 	bl	8000890 <ButtonMatrixRead>
  {
 80005ee:	e7ef      	b.n	80005d0 <main+0x14>
 80005f0:	20000184 	.word	0x20000184

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0318 	add.w	r3, r7, #24
 80005fe:	2238      	movs	r2, #56	; 0x38
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f002 fe05 	bl	8003212 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000616:	2000      	movs	r0, #0
 8000618:	f000 feaa 	bl	8001370 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061c:	2302      	movs	r3, #2
 800061e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000626:	2340      	movs	r3, #64	; 0x40
 8000628:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800062e:	2302      	movs	r3, #2
 8000630:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000632:	2304      	movs	r3, #4
 8000634:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000636:	2355      	movs	r3, #85	; 0x55
 8000638:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	4618      	mov	r0, r3
 800064c:	f000 ff44 	bl	80014d8 <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000656:	f000 f9ad 	bl	80009b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2303      	movs	r3, #3
 8000660:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2104      	movs	r1, #4
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fa48 	bl	8001b08 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800067e:	f000 f999 	bl	80009b4 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	; 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000690:	4b21      	ldr	r3, [pc, #132]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 8000692:	4a22      	ldr	r2, [pc, #136]	; (800071c <MX_LPUART1_UART_Init+0x90>)
 8000694:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000696:	4b20      	ldr	r3, [pc, #128]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 8000698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800069c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b18      	ldr	r3, [pc, #96]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006ce:	4812      	ldr	r0, [pc, #72]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 80006d0:	f001 fe84 	bl	80023dc <HAL_UART_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006da:	f000 f96b 	bl	80009b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006de:	2100      	movs	r1, #0
 80006e0:	480d      	ldr	r0, [pc, #52]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 80006e2:	f002 fbb5 	bl	8002e50 <HAL_UARTEx_SetTxFifoThreshold>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006ec:	f000 f962 	bl	80009b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f0:	2100      	movs	r1, #0
 80006f2:	4809      	ldr	r0, [pc, #36]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 80006f4:	f002 fbea 	bl	8002ecc <HAL_UARTEx_SetRxFifoThreshold>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80006fe:	f000 f959 	bl	80009b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_LPUART1_UART_Init+0x8c>)
 8000704:	f002 fb6b 	bl	8002dde <HAL_UARTEx_DisableFifoMode>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800070e:	f000 f951 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200000bc 	.word	0x200000bc
 800071c:	40008000 	.word	0x40008000

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b4d      	ldr	r3, [pc, #308]	; (800086c <MX_GPIO_Init+0x14c>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a4c      	ldr	r2, [pc, #304]	; (800086c <MX_GPIO_Init+0x14c>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b4a      	ldr	r3, [pc, #296]	; (800086c <MX_GPIO_Init+0x14c>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074e:	4b47      	ldr	r3, [pc, #284]	; (800086c <MX_GPIO_Init+0x14c>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a46      	ldr	r2, [pc, #280]	; (800086c <MX_GPIO_Init+0x14c>)
 8000754:	f043 0320 	orr.w	r3, r3, #32
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b44      	ldr	r3, [pc, #272]	; (800086c <MX_GPIO_Init+0x14c>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0320 	and.w	r3, r3, #32
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b41      	ldr	r3, [pc, #260]	; (800086c <MX_GPIO_Init+0x14c>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a40      	ldr	r2, [pc, #256]	; (800086c <MX_GPIO_Init+0x14c>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b3e      	ldr	r3, [pc, #248]	; (800086c <MX_GPIO_Init+0x14c>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b3b      	ldr	r3, [pc, #236]	; (800086c <MX_GPIO_Init+0x14c>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a3a      	ldr	r2, [pc, #232]	; (800086c <MX_GPIO_Init+0x14c>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b38      	ldr	r3, [pc, #224]	; (800086c <MX_GPIO_Init+0x14c>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2120      	movs	r1, #32
 800079a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079e:	f000 fdb7 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80007a8:	4831      	ldr	r0, [pc, #196]	; (8000870 <MX_GPIO_Init+0x150>)
 80007aa:	f000 fdb1 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	482b      	ldr	r0, [pc, #172]	; (8000874 <MX_GPIO_Init+0x154>)
 80007c6:	f000 fc09 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007ca:	2320      	movs	r3, #32
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e4:	f000 fbfa 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80007e8:	f44f 7320 	mov.w	r3, #640	; 0x280
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000800:	f000 fbec 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8000804:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800080a:	2311      	movs	r3, #17
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	4814      	ldr	r0, [pc, #80]	; (8000870 <MX_GPIO_Init+0x150>)
 800081e:	f000 fbdd 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800082a:	2301      	movs	r3, #1
 800082c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	480f      	ldr	r0, [pc, #60]	; (8000874 <MX_GPIO_Init+0x154>)
 8000836:	f000 fbd1 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800083a:	2340      	movs	r3, #64	; 0x40
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000842:	2301      	movs	r3, #1
 8000844:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	4808      	ldr	r0, [pc, #32]	; (8000870 <MX_GPIO_Init+0x150>)
 800084e:	f000 fbc5 	bl	8000fdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2100      	movs	r1, #0
 8000856:	2028      	movs	r0, #40	; 0x28
 8000858:	f000 fb8b 	bl	8000f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800085c:	2028      	movs	r0, #40	; 0x28
 800085e:	f000 fba2 	bl	8000fa6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000862:	bf00      	nop
 8000864:	3728      	adds	r7, #40	; 0x28
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000
 8000870:	48000400 	.word	0x48000400
 8000874:	48000800 	.word	0x48000800

08000878 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	80fb      	strh	r3, [r7, #6]
//  if(GPIO_Pin == GPIO_PIN_13)
//  {
//	  HAL_GPIO_WritePin(LD2_Pin, GPIO_PIN_RESET);
//  }
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <ButtonMatrixRead>:

void ButtonMatrixRead(){
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
	static uint8_t X = 0;

	for(int i = 0; i< 4; i++)
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	e048      	b.n	800092e <ButtonMatrixRead+0x9e>
	{
		if(HAL_GPIO_ReadPin(BMX_L[i].Port, BMX_L[i].Pin) == GPIO_PIN_RESET)
 800089c:	4a3e      	ldr	r2, [pc, #248]	; (8000998 <ButtonMatrixRead+0x108>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80008a4:	493c      	ldr	r1, [pc, #240]	; (8000998 <ButtonMatrixRead+0x108>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	00db      	lsls	r3, r3, #3
 80008aa:	440b      	add	r3, r1
 80008ac:	889b      	ldrh	r3, [r3, #4]
 80008ae:	4619      	mov	r1, r3
 80008b0:	4610      	mov	r0, r2
 80008b2:	f000 fd15 	bl	80012e0 <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d11f      	bne.n	80008fc <ButtonMatrixRead+0x6c>
		{
			ButtonState |= 1 << (X+(i*3));
 80008bc:	4b37      	ldr	r3, [pc, #220]	; (800099c <ButtonMatrixRead+0x10c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	4613      	mov	r3, r2
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	4413      	add	r3, r2
 80008ca:	440b      	add	r3, r1
 80008cc:	2201      	movs	r2, #1
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	b21a      	sxth	r2, r3
 80008d4:	4b32      	ldr	r3, [pc, #200]	; (80009a0 <ButtonMatrixRead+0x110>)
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	b21b      	sxth	r3, r3
 80008da:	4313      	orrs	r3, r2
 80008dc:	b21b      	sxth	r3, r3
 80008de:	b29a      	uxth	r2, r3
 80008e0:	4b2f      	ldr	r3, [pc, #188]	; (80009a0 <ButtonMatrixRead+0x110>)
 80008e2:	801a      	strh	r2, [r3, #0]
			Memo[j] = ButtonState;
 80008e4:	4b2e      	ldr	r3, [pc, #184]	; (80009a0 <ButtonMatrixRead+0x110>)
 80008e6:	881a      	ldrh	r2, [r3, #0]
 80008e8:	4b2e      	ldr	r3, [pc, #184]	; (80009a4 <ButtonMatrixRead+0x114>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4611      	mov	r1, r2
 80008ee:	4a2e      	ldr	r2, [pc, #184]	; (80009a8 <ButtonMatrixRead+0x118>)
 80008f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			j+1;
			printf (Memo);
 80008f4:	482c      	ldr	r0, [pc, #176]	; (80009a8 <ButtonMatrixRead+0x118>)
 80008f6:	f002 fc37 	bl	8003168 <iprintf>
 80008fa:	e015      	b.n	8000928 <ButtonMatrixRead+0x98>

		}
		else
		{
			ButtonState &= ~(1 << (X+(i*3)));
 80008fc:	4b27      	ldr	r3, [pc, #156]	; (800099c <ButtonMatrixRead+0x10c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	4613      	mov	r3, r2
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	4413      	add	r3, r2
 800090a:	440b      	add	r3, r1
 800090c:	2201      	movs	r2, #1
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	b21b      	sxth	r3, r3
 8000914:	43db      	mvns	r3, r3
 8000916:	b21a      	sxth	r2, r3
 8000918:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <ButtonMatrixRead+0x110>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	b21b      	sxth	r3, r3
 800091e:	4013      	ands	r3, r2
 8000920:	b21b      	sxth	r3, r3
 8000922:	b29a      	uxth	r2, r3
 8000924:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <ButtonMatrixRead+0x110>)
 8000926:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i< 4; i++)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3301      	adds	r3, #1
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b03      	cmp	r3, #3
 8000932:	ddb3      	ble.n	800089c <ButtonMatrixRead+0xc>

	if (Memo == ID){
		check = 1;
	}

	HAL_GPIO_WritePin(BMX_R[X].Port,BMX_R[X].Pin,GPIO_PIN_SET);
 8000934:	4b19      	ldr	r3, [pc, #100]	; (800099c <ButtonMatrixRead+0x10c>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <ButtonMatrixRead+0x11c>)
 800093c:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <ButtonMatrixRead+0x10c>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4a19      	ldr	r2, [pc, #100]	; (80009ac <ButtonMatrixRead+0x11c>)
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	4413      	add	r3, r2
 800094a:	889b      	ldrh	r3, [r3, #4]
 800094c:	2201      	movs	r2, #1
 800094e:	4619      	mov	r1, r3
 8000950:	f000 fcde 	bl	8001310 <HAL_GPIO_WritePin>

	uint8_t nextX = (X+1)%3;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <ButtonMatrixRead+0x10c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <ButtonMatrixRead+0x120>)
 800095c:	fb83 3102 	smull	r3, r1, r3, r2
 8000960:	17d3      	asrs	r3, r2, #31
 8000962:	1ac9      	subs	r1, r1, r3
 8000964:	460b      	mov	r3, r1
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	440b      	add	r3, r1
 800096a:	1ad1      	subs	r1, r2, r3
 800096c:	460b      	mov	r3, r1
 800096e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BMX_R[nextX].Port,BMX_R[nextX].Pin,GPIO_PIN_RESET);
 8000970:	78fb      	ldrb	r3, [r7, #3]
 8000972:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <ButtonMatrixRead+0x11c>)
 8000974:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000978:	78fb      	ldrb	r3, [r7, #3]
 800097a:	4a0c      	ldr	r2, [pc, #48]	; (80009ac <ButtonMatrixRead+0x11c>)
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	4413      	add	r3, r2
 8000980:	889b      	ldrh	r3, [r3, #4]
 8000982:	2200      	movs	r2, #0
 8000984:	4619      	mov	r1, r3
 8000986:	f000 fcc3 	bl	8001310 <HAL_GPIO_WritePin>
	X = nextX;
 800098a:	4a04      	ldr	r2, [pc, #16]	; (800099c <ButtonMatrixRead+0x10c>)
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	7013      	strb	r3, [r2, #0]
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000000 	.word	0x20000000
 800099c:	20000188 	.word	0x20000188
 80009a0:	2000014c 	.word	0x2000014c
 80009a4:	20000180 	.word	0x20000180
 80009a8:	20000150 	.word	0x20000150
 80009ac:	20000020 	.word	0x20000020
 80009b0:	55555556 	.word	0x55555556

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <HAL_MspInit+0x44>)
 80009c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ca:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <HAL_MspInit+0x44>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6613      	str	r3, [r2, #96]	; 0x60
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <HAL_MspInit+0x44>)
 80009d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_MspInit+0x44>)
 80009e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <HAL_MspInit+0x44>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_MspInit+0x44>)
 80009ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009f6:	f000 fd5f 	bl	80014b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000

08000a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b09e      	sub	sp, #120	; 0x78
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	2254      	movs	r2, #84	; 0x54
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f002 fbf2 	bl	8003212 <memset>
  if(huart->Instance==LPUART1)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a1f      	ldr	r2, [pc, #124]	; (8000ab0 <HAL_UART_MspInit+0xa8>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d136      	bne.n	8000aa6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a38:	2320      	movs	r3, #32
 8000a3a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 fa7b 	bl	8001f40 <HAL_RCCEx_PeriphCLKConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a50:	f7ff ffb0 	bl	80009b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <HAL_UART_MspInit+0xac>)
 8000a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a58:	4a16      	ldr	r2, [pc, #88]	; (8000ab4 <HAL_UART_MspInit+0xac>)
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <HAL_UART_MspInit+0xac>)
 8000a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <HAL_UART_MspInit+0xac>)
 8000a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a70:	4a10      	ldr	r2, [pc, #64]	; (8000ab4 <HAL_UART_MspInit+0xac>)
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_UART_MspInit+0xac>)
 8000a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000a84:	230c      	movs	r3, #12
 8000a86:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a94:	230c      	movs	r3, #12
 8000a96:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa2:	f000 fa9b 	bl	8000fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000aa6:	bf00      	nop
 8000aa8:	3778      	adds	r7, #120	; 0x78
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40008000 	.word	0x40008000
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler+0x4>

08000abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <MemManage_Handler+0x4>

08000aca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b04:	f000 f93c 	bl	8000d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b10:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b14:	f000 fc14 	bl	8001340 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	e00a      	b.n	8000b44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b2e:	f3af 8000 	nop.w
 8000b32:	4601      	mov	r1, r0
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	1c5a      	adds	r2, r3, #1
 8000b38:	60ba      	str	r2, [r7, #8]
 8000b3a:	b2ca      	uxtb	r2, r1
 8000b3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	3301      	adds	r3, #1
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697a      	ldr	r2, [r7, #20]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	dbf0      	blt.n	8000b2e <_read+0x12>
  }

  return len;
 8000b4c:	687b      	ldr	r3, [r7, #4]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b086      	sub	sp, #24
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	60f8      	str	r0, [r7, #12]
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	e009      	b.n	8000b7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	60ba      	str	r2, [r7, #8]
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	697a      	ldr	r2, [r7, #20]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	dbf1      	blt.n	8000b68 <_write+0x12>
  }
  return len;
 8000b84:	687b      	ldr	r3, [r7, #4]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <_close>:

int _close(int file)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bb6:	605a      	str	r2, [r3, #4]
  return 0;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <_isatty>:

int _isatty(int file)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c00:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <_sbrk+0x5c>)
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <_sbrk+0x60>)
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <_sbrk+0x64>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <_sbrk+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d207      	bcs.n	8000c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c28:	f002 fb42 	bl	80032b0 <__errno>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	220c      	movs	r2, #12
 8000c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	e009      	b.n	8000c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <_sbrk+0x64>)
 8000c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20020000 	.word	0x20020000
 8000c58:	00000400 	.word	0x00000400
 8000c5c:	2000018c 	.word	0x2000018c
 8000c60:	200002e0 	.word	0x200002e0

08000c64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <SystemInit+0x20>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <SystemInit+0x20>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c88:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c8c:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c8e:	490e      	ldr	r1, [pc, #56]	; (8000cc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c90:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <LoopForever+0xe>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c94:	e002      	b.n	8000c9c <LoopCopyDataInit>

08000c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9a:	3304      	adds	r3, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca0:	d3f9      	bcc.n	8000c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca4:	4c0b      	ldr	r4, [pc, #44]	; (8000cd4 <LoopForever+0x16>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca8:	e001      	b.n	8000cae <LoopFillZerobss>

08000caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cac:	3204      	adds	r2, #4

08000cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb0:	d3fb      	bcc.n	8000caa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cb2:	f7ff ffd7 	bl	8000c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f002 fb01 	bl	80032bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cba:	f7ff fc7f 	bl	80005bc <main>

08000cbe <LoopForever>:

LoopForever:
    b LoopForever
 8000cbe:	e7fe      	b.n	8000cbe <LoopForever>
  ldr   r0, =_estack
 8000cc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000ccc:	08003ef0 	.word	0x08003ef0
  ldr r2, =_sbss
 8000cd0:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000cd4:	200002e0 	.word	0x200002e0

08000cd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC1_2_IRQHandler>

08000cda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f939 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cea:	2000      	movs	r0, #0
 8000cec:	f000 f80e 	bl	8000d0c <HAL_InitTick>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	71fb      	strb	r3, [r7, #7]
 8000cfa:	e001      	b.n	8000d00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cfc:	f7ff fe60 	bl	80009c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d00:	79fb      	ldrb	r3, [r7, #7]

}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <HAL_InitTick+0x68>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d022      	beq.n	8000d66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d20:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <HAL_InitTick+0x6c>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <HAL_InitTick+0x68>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 f944 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d10f      	bne.n	8000d60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b0f      	cmp	r3, #15
 8000d44:	d809      	bhi.n	8000d5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d46:	2200      	movs	r2, #0
 8000d48:	6879      	ldr	r1, [r7, #4]
 8000d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4e:	f000 f910 	bl	8000f72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <HAL_InitTick+0x70>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	e007      	b.n	8000d6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	e004      	b.n	8000d6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	73fb      	strb	r3, [r7, #15]
 8000d64:	e001      	b.n	8000d6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000040 	.word	0x20000040
 8000d78:	20000038 	.word	0x20000038
 8000d7c:	2000003c 	.word	0x2000003c

08000d80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <HAL_IncTick+0x1c>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <HAL_IncTick+0x20>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a03      	ldr	r2, [pc, #12]	; (8000d9c <HAL_IncTick+0x1c>)
 8000d90:	6013      	str	r3, [r2, #0]
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	20000190 	.word	0x20000190
 8000da0:	20000040 	.word	0x20000040

08000da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <HAL_GetTick+0x14>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000190 	.word	0x20000190

08000dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dee:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	60d3      	str	r3, [r2, #12]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <__NVIC_GetPriorityGrouping+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0307 	and.w	r3, r3, #7
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	db0b      	blt.n	8000e4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	f003 021f 	and.w	r2, r3, #31
 8000e38:	4907      	ldr	r1, [pc, #28]	; (8000e58 <__NVIC_EnableIRQ+0x38>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	2001      	movs	r0, #1
 8000e42:	fa00 f202 	lsl.w	r2, r0, r2
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	; (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	; 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f28:	d301      	bcc.n	8000f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00f      	b.n	8000f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <SysTick_Config+0x40>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f36:	210f      	movs	r1, #15
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f7ff ff8e 	bl	8000e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <SysTick_Config+0x40>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <SysTick_Config+0x40>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff29 	bl	8000dbc <__NVIC_SetPriorityGrouping>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f80:	f7ff ff40 	bl	8000e04 <__NVIC_GetPriorityGrouping>
 8000f84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	f7ff ff90 	bl	8000eb0 <NVIC_EncodePriority>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff5f 	bl	8000e5c <__NVIC_SetPriority>
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff33 	bl	8000e20 <__NVIC_EnableIRQ>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffa4 	bl	8000f18 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fea:	e15a      	b.n	80012a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 814c 	beq.w	800129c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b01      	cmp	r3, #1
 800100e:	d005      	beq.n	800101c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001018:	2b02      	cmp	r3, #2
 800101a:	d130      	bne.n	800107e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68da      	ldr	r2, [r3, #12]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001052:	2201      	movs	r2, #1
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	091b      	lsrs	r3, r3, #4
 8001068:	f003 0201 	and.w	r2, r3, #1
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b03      	cmp	r3, #3
 8001088:	d017      	beq.n	80010ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	2203      	movs	r2, #3
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d123      	bne.n	800110e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	08da      	lsrs	r2, r3, #3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3208      	adds	r2, #8
 80010ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	220f      	movs	r2, #15
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	691a      	ldr	r2, [r3, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	6939      	ldr	r1, [r7, #16]
 800110a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0203 	and.w	r2, r3, #3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 80a6 	beq.w	800129c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001150:	4b5b      	ldr	r3, [pc, #364]	; (80012c0 <HAL_GPIO_Init+0x2e4>)
 8001152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001154:	4a5a      	ldr	r2, [pc, #360]	; (80012c0 <HAL_GPIO_Init+0x2e4>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6613      	str	r3, [r2, #96]	; 0x60
 800115c:	4b58      	ldr	r3, [pc, #352]	; (80012c0 <HAL_GPIO_Init+0x2e4>)
 800115e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001168:	4a56      	ldr	r2, [pc, #344]	; (80012c4 <HAL_GPIO_Init+0x2e8>)
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	220f      	movs	r2, #15
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001192:	d01f      	beq.n	80011d4 <HAL_GPIO_Init+0x1f8>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a4c      	ldr	r2, [pc, #304]	; (80012c8 <HAL_GPIO_Init+0x2ec>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d019      	beq.n	80011d0 <HAL_GPIO_Init+0x1f4>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a4b      	ldr	r2, [pc, #300]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d013      	beq.n	80011cc <HAL_GPIO_Init+0x1f0>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a4a      	ldr	r2, [pc, #296]	; (80012d0 <HAL_GPIO_Init+0x2f4>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d00d      	beq.n	80011c8 <HAL_GPIO_Init+0x1ec>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a49      	ldr	r2, [pc, #292]	; (80012d4 <HAL_GPIO_Init+0x2f8>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d007      	beq.n	80011c4 <HAL_GPIO_Init+0x1e8>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a48      	ldr	r2, [pc, #288]	; (80012d8 <HAL_GPIO_Init+0x2fc>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d101      	bne.n	80011c0 <HAL_GPIO_Init+0x1e4>
 80011bc:	2305      	movs	r3, #5
 80011be:	e00a      	b.n	80011d6 <HAL_GPIO_Init+0x1fa>
 80011c0:	2306      	movs	r3, #6
 80011c2:	e008      	b.n	80011d6 <HAL_GPIO_Init+0x1fa>
 80011c4:	2304      	movs	r3, #4
 80011c6:	e006      	b.n	80011d6 <HAL_GPIO_Init+0x1fa>
 80011c8:	2303      	movs	r3, #3
 80011ca:	e004      	b.n	80011d6 <HAL_GPIO_Init+0x1fa>
 80011cc:	2302      	movs	r3, #2
 80011ce:	e002      	b.n	80011d6 <HAL_GPIO_Init+0x1fa>
 80011d0:	2301      	movs	r3, #1
 80011d2:	e000      	b.n	80011d6 <HAL_GPIO_Init+0x1fa>
 80011d4:	2300      	movs	r3, #0
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	f002 0203 	and.w	r2, r2, #3
 80011dc:	0092      	lsls	r2, r2, #2
 80011de:	4093      	lsls	r3, r2
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e6:	4937      	ldr	r1, [pc, #220]	; (80012c4 <HAL_GPIO_Init+0x2e8>)
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3302      	adds	r3, #2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011f4:	4b39      	ldr	r3, [pc, #228]	; (80012dc <HAL_GPIO_Init+0x300>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001218:	4a30      	ldr	r2, [pc, #192]	; (80012dc <HAL_GPIO_Init+0x300>)
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800121e:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <HAL_GPIO_Init+0x300>)
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	43db      	mvns	r3, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001242:	4a26      	ldr	r2, [pc, #152]	; (80012dc <HAL_GPIO_Init+0x300>)
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001248:	4b24      	ldr	r3, [pc, #144]	; (80012dc <HAL_GPIO_Init+0x300>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800126c:	4a1b      	ldr	r2, [pc, #108]	; (80012dc <HAL_GPIO_Init+0x300>)
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <HAL_GPIO_Init+0x300>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001296:	4a11      	ldr	r2, [pc, #68]	; (80012dc <HAL_GPIO_Init+0x300>)
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	3301      	adds	r3, #1
 80012a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f47f ae9d 	bne.w	8000fec <HAL_GPIO_Init+0x10>
  }
}
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	371c      	adds	r7, #28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40010000 	.word	0x40010000
 80012c8:	48000400 	.word	0x48000400
 80012cc:	48000800 	.word	0x48000800
 80012d0:	48000c00 	.word	0x48000c00
 80012d4:	48001000 	.word	0x48001000
 80012d8:	48001400 	.word	0x48001400
 80012dc:	40010400 	.word	0x40010400

080012e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691a      	ldr	r2, [r3, #16]
 80012f0:	887b      	ldrh	r3, [r7, #2]
 80012f2:	4013      	ands	r3, r2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012f8:	2301      	movs	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	e001      	b.n	8001302 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001302:	7bfb      	ldrb	r3, [r7, #15]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
 800131c:	4613      	mov	r3, r2
 800131e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001320:	787b      	ldrb	r3, [r7, #1]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800132c:	e002      	b.n	8001334 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800132e:	887a      	ldrh	r2, [r7, #2]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800134c:	695a      	ldr	r2, [r3, #20]
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	4013      	ands	r3, r2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d006      	beq.n	8001364 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001356:	4a05      	ldr	r2, [pc, #20]	; (800136c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fa8a 	bl	8000878 <HAL_GPIO_EXTI_Callback>
  }
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40010400 	.word	0x40010400

08001370 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d141      	bne.n	8001402 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800137e:	4b4b      	ldr	r3, [pc, #300]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800138a:	d131      	bne.n	80013f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800138c:	4b47      	ldr	r3, [pc, #284]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001392:	4a46      	ldr	r2, [pc, #280]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001398:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800139c:	4b43      	ldr	r3, [pc, #268]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013a4:	4a41      	ldr	r2, [pc, #260]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013ac:	4b40      	ldr	r3, [pc, #256]	; (80014b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2232      	movs	r2, #50	; 0x32
 80013b2:	fb02 f303 	mul.w	r3, r2, r3
 80013b6:	4a3f      	ldr	r2, [pc, #252]	; (80014b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013b8:	fba2 2303 	umull	r2, r3, r2, r3
 80013bc:	0c9b      	lsrs	r3, r3, #18
 80013be:	3301      	adds	r3, #1
 80013c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013c2:	e002      	b.n	80013ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ca:	4b38      	ldr	r3, [pc, #224]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d6:	d102      	bne.n	80013de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f2      	bne.n	80013c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013de:	4b33      	ldr	r3, [pc, #204]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ea:	d158      	bne.n	800149e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e057      	b.n	80014a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013f0:	4b2e      	ldr	r3, [pc, #184]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013f6:	4a2d      	ldr	r2, [pc, #180]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001400:	e04d      	b.n	800149e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001408:	d141      	bne.n	800148e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800140a:	4b28      	ldr	r3, [pc, #160]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001416:	d131      	bne.n	800147c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001418:	4b24      	ldr	r3, [pc, #144]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800141a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800141e:	4a23      	ldr	r2, [pc, #140]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001424:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001428:	4b20      	ldr	r3, [pc, #128]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001430:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001436:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001438:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2232      	movs	r2, #50	; 0x32
 800143e:	fb02 f303 	mul.w	r3, r2, r3
 8001442:	4a1c      	ldr	r2, [pc, #112]	; (80014b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001444:	fba2 2303 	umull	r2, r3, r2, r3
 8001448:	0c9b      	lsrs	r3, r3, #18
 800144a:	3301      	adds	r3, #1
 800144c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800144e:	e002      	b.n	8001456 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	3b01      	subs	r3, #1
 8001454:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800145e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001462:	d102      	bne.n	800146a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f2      	bne.n	8001450 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001476:	d112      	bne.n	800149e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e011      	b.n	80014a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800147e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001488:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800148c:	e007      	b.n	800149e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800148e:	4b07      	ldr	r3, [pc, #28]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001496:	4a05      	ldr	r2, [pc, #20]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001498:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800149c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	40007000 	.word	0x40007000
 80014b0:	20000038 	.word	0x20000038
 80014b4:	431bde83 	.word	0x431bde83

080014b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c6:	6093      	str	r3, [r2, #8]
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40007000 	.word	0x40007000

080014d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e306      	b.n	8001af8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d075      	beq.n	80015e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014f6:	4b97      	ldr	r3, [pc, #604]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001500:	4b94      	ldr	r3, [pc, #592]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	2b0c      	cmp	r3, #12
 800150e:	d102      	bne.n	8001516 <HAL_RCC_OscConfig+0x3e>
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	2b03      	cmp	r3, #3
 8001514:	d002      	beq.n	800151c <HAL_RCC_OscConfig+0x44>
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	2b08      	cmp	r3, #8
 800151a:	d10b      	bne.n	8001534 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151c:	4b8d      	ldr	r3, [pc, #564]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d05b      	beq.n	80015e0 <HAL_RCC_OscConfig+0x108>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d157      	bne.n	80015e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e2e1      	b.n	8001af8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800153c:	d106      	bne.n	800154c <HAL_RCC_OscConfig+0x74>
 800153e:	4b85      	ldr	r3, [pc, #532]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a84      	ldr	r2, [pc, #528]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 8001544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e01d      	b.n	8001588 <HAL_RCC_OscConfig+0xb0>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001554:	d10c      	bne.n	8001570 <HAL_RCC_OscConfig+0x98>
 8001556:	4b7f      	ldr	r3, [pc, #508]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a7e      	ldr	r2, [pc, #504]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 800155c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	4b7c      	ldr	r3, [pc, #496]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a7b      	ldr	r2, [pc, #492]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 8001568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	e00b      	b.n	8001588 <HAL_RCC_OscConfig+0xb0>
 8001570:	4b78      	ldr	r3, [pc, #480]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a77      	ldr	r2, [pc, #476]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 8001576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b75      	ldr	r3, [pc, #468]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a74      	ldr	r2, [pc, #464]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 8001582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d013      	beq.n	80015b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff fc08 	bl	8000da4 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001598:	f7ff fc04 	bl	8000da4 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	; 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e2a6      	b.n	8001af8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015aa:	4b6a      	ldr	r3, [pc, #424]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0xc0>
 80015b6:	e014      	b.n	80015e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b8:	f7ff fbf4 	bl	8000da4 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c0:	f7ff fbf0 	bl	8000da4 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	; 0x64
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e292      	b.n	8001af8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015d2:	4b60      	ldr	r3, [pc, #384]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0xe8>
 80015de:	e000      	b.n	80015e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d075      	beq.n	80016da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ee:	4b59      	ldr	r3, [pc, #356]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015f8:	4b56      	ldr	r3, [pc, #344]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	2b0c      	cmp	r3, #12
 8001606:	d102      	bne.n	800160e <HAL_RCC_OscConfig+0x136>
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d002      	beq.n	8001614 <HAL_RCC_OscConfig+0x13c>
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	2b04      	cmp	r3, #4
 8001612:	d11f      	bne.n	8001654 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001614:	4b4f      	ldr	r3, [pc, #316]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_RCC_OscConfig+0x154>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e265      	b.n	8001af8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162c:	4b49      	ldr	r3, [pc, #292]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	061b      	lsls	r3, r3, #24
 800163a:	4946      	ldr	r1, [pc, #280]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001640:	4b45      	ldr	r3, [pc, #276]	; (8001758 <HAL_RCC_OscConfig+0x280>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fb61 	bl	8000d0c <HAL_InitTick>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d043      	beq.n	80016d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e251      	b.n	8001af8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d023      	beq.n	80016a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800165c:	4b3d      	ldr	r3, [pc, #244]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a3c      	ldr	r2, [pc, #240]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 8001662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff fb9c 	bl	8000da4 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001670:	f7ff fb98 	bl	8000da4 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e23a      	b.n	8001af8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001682:	4b34      	ldr	r3, [pc, #208]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168e:	4b31      	ldr	r3, [pc, #196]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	061b      	lsls	r3, r3, #24
 800169c:	492d      	ldr	r1, [pc, #180]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	604b      	str	r3, [r1, #4]
 80016a2:	e01a      	b.n	80016da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016a4:	4b2b      	ldr	r3, [pc, #172]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a2a      	ldr	r2, [pc, #168]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 80016aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b0:	f7ff fb78 	bl	8000da4 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b8:	f7ff fb74 	bl	8000da4 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e216      	b.n	8001af8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016ca:	4b22      	ldr	r3, [pc, #136]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x1e0>
 80016d6:	e000      	b.n	80016da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d041      	beq.n	800176a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d01c      	beq.n	8001728 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ee:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 80016f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f4:	4a17      	ldr	r2, [pc, #92]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fe:	f7ff fb51 	bl	8000da4 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001706:	f7ff fb4d 	bl	8000da4 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e1ef      	b.n	8001af8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 800171a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0ef      	beq.n	8001706 <HAL_RCC_OscConfig+0x22e>
 8001726:	e020      	b.n	800176a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 800172a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800172e:	4a09      	ldr	r2, [pc, #36]	; (8001754 <HAL_RCC_OscConfig+0x27c>)
 8001730:	f023 0301 	bic.w	r3, r3, #1
 8001734:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001738:	f7ff fb34 	bl	8000da4 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800173e:	e00d      	b.n	800175c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001740:	f7ff fb30 	bl	8000da4 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d906      	bls.n	800175c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e1d2      	b.n	8001af8 <HAL_RCC_OscConfig+0x620>
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000
 8001758:	2000003c 	.word	0x2000003c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800175c:	4b8c      	ldr	r3, [pc, #560]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 800175e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1ea      	bne.n	8001740 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 80a6 	beq.w	80018c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001778:	2300      	movs	r3, #0
 800177a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800177c:	4b84      	ldr	r3, [pc, #528]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 800177e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_OscConfig+0x2b4>
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x2b6>
 800178c:	2300      	movs	r3, #0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00d      	beq.n	80017ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	4b7f      	ldr	r3, [pc, #508]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 8001794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001796:	4a7e      	ldr	r2, [pc, #504]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	6593      	str	r3, [r2, #88]	; 0x58
 800179e:	4b7c      	ldr	r3, [pc, #496]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017aa:	2301      	movs	r3, #1
 80017ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ae:	4b79      	ldr	r3, [pc, #484]	; (8001994 <HAL_RCC_OscConfig+0x4bc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d118      	bne.n	80017ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017ba:	4b76      	ldr	r3, [pc, #472]	; (8001994 <HAL_RCC_OscConfig+0x4bc>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a75      	ldr	r2, [pc, #468]	; (8001994 <HAL_RCC_OscConfig+0x4bc>)
 80017c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c6:	f7ff faed 	bl	8000da4 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ce:	f7ff fae9 	bl	8000da4 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e18b      	b.n	8001af8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e0:	4b6c      	ldr	r3, [pc, #432]	; (8001994 <HAL_RCC_OscConfig+0x4bc>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d108      	bne.n	8001806 <HAL_RCC_OscConfig+0x32e>
 80017f4:	4b66      	ldr	r3, [pc, #408]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 80017f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fa:	4a65      	ldr	r2, [pc, #404]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001804:	e024      	b.n	8001850 <HAL_RCC_OscConfig+0x378>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b05      	cmp	r3, #5
 800180c:	d110      	bne.n	8001830 <HAL_RCC_OscConfig+0x358>
 800180e:	4b60      	ldr	r3, [pc, #384]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 8001810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001814:	4a5e      	ldr	r2, [pc, #376]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 8001816:	f043 0304 	orr.w	r3, r3, #4
 800181a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800181e:	4b5c      	ldr	r3, [pc, #368]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 8001820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001824:	4a5a      	ldr	r2, [pc, #360]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800182e:	e00f      	b.n	8001850 <HAL_RCC_OscConfig+0x378>
 8001830:	4b57      	ldr	r3, [pc, #348]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 8001832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001836:	4a56      	ldr	r2, [pc, #344]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 8001838:	f023 0301 	bic.w	r3, r3, #1
 800183c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001840:	4b53      	ldr	r3, [pc, #332]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 8001842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001846:	4a52      	ldr	r2, [pc, #328]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 8001848:	f023 0304 	bic.w	r3, r3, #4
 800184c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d016      	beq.n	8001886 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001858:	f7ff faa4 	bl	8000da4 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800185e:	e00a      	b.n	8001876 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001860:	f7ff faa0 	bl	8000da4 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f241 3288 	movw	r2, #5000	; 0x1388
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e140      	b.n	8001af8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001876:	4b46      	ldr	r3, [pc, #280]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 8001878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0ed      	beq.n	8001860 <HAL_RCC_OscConfig+0x388>
 8001884:	e015      	b.n	80018b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001886:	f7ff fa8d 	bl	8000da4 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800188c:	e00a      	b.n	80018a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800188e:	f7ff fa89 	bl	8000da4 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	f241 3288 	movw	r2, #5000	; 0x1388
 800189c:	4293      	cmp	r3, r2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e129      	b.n	8001af8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018a4:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 80018a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1ed      	bne.n	800188e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018b2:	7ffb      	ldrb	r3, [r7, #31]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d105      	bne.n	80018c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018b8:	4b35      	ldr	r3, [pc, #212]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 80018ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018bc:	4a34      	ldr	r2, [pc, #208]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 80018be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0320 	and.w	r3, r3, #32
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d03c      	beq.n	800194a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d01c      	beq.n	8001912 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018d8:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 80018da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018de:	4a2c      	ldr	r2, [pc, #176]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e8:	f7ff fa5c 	bl	8000da4 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018f0:	f7ff fa58 	bl	8000da4 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e0fa      	b.n	8001af8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001902:	4b23      	ldr	r3, [pc, #140]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 8001904:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0ef      	beq.n	80018f0 <HAL_RCC_OscConfig+0x418>
 8001910:	e01b      	b.n	800194a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001912:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 8001914:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001918:	4a1d      	ldr	r2, [pc, #116]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 800191a:	f023 0301 	bic.w	r3, r3, #1
 800191e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001922:	f7ff fa3f 	bl	8000da4 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800192a:	f7ff fa3b 	bl	8000da4 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e0dd      	b.n	8001af8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800193c:	4b14      	ldr	r3, [pc, #80]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 800193e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1ef      	bne.n	800192a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 80d1 	beq.w	8001af6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001954:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 030c 	and.w	r3, r3, #12
 800195c:	2b0c      	cmp	r3, #12
 800195e:	f000 808b 	beq.w	8001a78 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d15e      	bne.n	8001a28 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a08      	ldr	r2, [pc, #32]	; (8001990 <HAL_RCC_OscConfig+0x4b8>)
 8001970:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001976:	f7ff fa15 	bl	8000da4 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800197c:	e00c      	b.n	8001998 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197e:	f7ff fa11 	bl	8000da4 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d905      	bls.n	8001998 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e0b3      	b.n	8001af8 <HAL_RCC_OscConfig+0x620>
 8001990:	40021000 	.word	0x40021000
 8001994:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001998:	4b59      	ldr	r3, [pc, #356]	; (8001b00 <HAL_RCC_OscConfig+0x628>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1ec      	bne.n	800197e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019a4:	4b56      	ldr	r3, [pc, #344]	; (8001b00 <HAL_RCC_OscConfig+0x628>)
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	4b56      	ldr	r3, [pc, #344]	; (8001b04 <HAL_RCC_OscConfig+0x62c>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6a11      	ldr	r1, [r2, #32]
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019b4:	3a01      	subs	r2, #1
 80019b6:	0112      	lsls	r2, r2, #4
 80019b8:	4311      	orrs	r1, r2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80019be:	0212      	lsls	r2, r2, #8
 80019c0:	4311      	orrs	r1, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019c6:	0852      	lsrs	r2, r2, #1
 80019c8:	3a01      	subs	r2, #1
 80019ca:	0552      	lsls	r2, r2, #21
 80019cc:	4311      	orrs	r1, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019d2:	0852      	lsrs	r2, r2, #1
 80019d4:	3a01      	subs	r2, #1
 80019d6:	0652      	lsls	r2, r2, #25
 80019d8:	4311      	orrs	r1, r2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019de:	06d2      	lsls	r2, r2, #27
 80019e0:	430a      	orrs	r2, r1
 80019e2:	4947      	ldr	r1, [pc, #284]	; (8001b00 <HAL_RCC_OscConfig+0x628>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e8:	4b45      	ldr	r3, [pc, #276]	; (8001b00 <HAL_RCC_OscConfig+0x628>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a44      	ldr	r2, [pc, #272]	; (8001b00 <HAL_RCC_OscConfig+0x628>)
 80019ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019f4:	4b42      	ldr	r3, [pc, #264]	; (8001b00 <HAL_RCC_OscConfig+0x628>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	4a41      	ldr	r2, [pc, #260]	; (8001b00 <HAL_RCC_OscConfig+0x628>)
 80019fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a00:	f7ff f9d0 	bl	8000da4 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a08:	f7ff f9cc 	bl	8000da4 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e06e      	b.n	8001af8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1a:	4b39      	ldr	r3, [pc, #228]	; (8001b00 <HAL_RCC_OscConfig+0x628>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0x530>
 8001a26:	e066      	b.n	8001af6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a28:	4b35      	ldr	r3, [pc, #212]	; (8001b00 <HAL_RCC_OscConfig+0x628>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a34      	ldr	r2, [pc, #208]	; (8001b00 <HAL_RCC_OscConfig+0x628>)
 8001a2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a32:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a34:	4b32      	ldr	r3, [pc, #200]	; (8001b00 <HAL_RCC_OscConfig+0x628>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	4a31      	ldr	r2, [pc, #196]	; (8001b00 <HAL_RCC_OscConfig+0x628>)
 8001a3a:	f023 0303 	bic.w	r3, r3, #3
 8001a3e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a40:	4b2f      	ldr	r3, [pc, #188]	; (8001b00 <HAL_RCC_OscConfig+0x628>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4a2e      	ldr	r2, [pc, #184]	; (8001b00 <HAL_RCC_OscConfig+0x628>)
 8001a46:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff f9a8 	bl	8000da4 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff f9a4 	bl	8000da4 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e046      	b.n	8001af8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a6a:	4b25      	ldr	r3, [pc, #148]	; (8001b00 <HAL_RCC_OscConfig+0x628>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x580>
 8001a76:	e03e      	b.n	8001af6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e039      	b.n	8001af8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001a84:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <HAL_RCC_OscConfig+0x628>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f003 0203 	and.w	r2, r3, #3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d12c      	bne.n	8001af2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d123      	bne.n	8001af2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d11b      	bne.n	8001af2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d113      	bne.n	8001af2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	085b      	lsrs	r3, r3, #1
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d109      	bne.n	8001af2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae8:	085b      	lsrs	r3, r3, #1
 8001aea:	3b01      	subs	r3, #1
 8001aec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d001      	beq.n	8001af6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3720      	adds	r7, #32
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40021000 	.word	0x40021000
 8001b04:	019f800c 	.word	0x019f800c

08001b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e11e      	b.n	8001d5e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b20:	4b91      	ldr	r3, [pc, #580]	; (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 030f 	and.w	r3, r3, #15
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d910      	bls.n	8001b50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2e:	4b8e      	ldr	r3, [pc, #568]	; (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 020f 	bic.w	r2, r3, #15
 8001b36:	498c      	ldr	r1, [pc, #560]	; (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b8a      	ldr	r3, [pc, #552]	; (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e106      	b.n	8001d5e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d073      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d129      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b64:	4b81      	ldr	r3, [pc, #516]	; (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0f4      	b.n	8001d5e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b74:	f000 f99e 	bl	8001eb4 <RCC_GetSysClockFreqFromPLLSource>
 8001b78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4a7c      	ldr	r2, [pc, #496]	; (8001d70 <HAL_RCC_ClockConfig+0x268>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d93f      	bls.n	8001c02 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b82:	4b7a      	ldr	r3, [pc, #488]	; (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d009      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d033      	beq.n	8001c02 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d12f      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ba2:	4b72      	ldr	r3, [pc, #456]	; (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001baa:	4a70      	ldr	r2, [pc, #448]	; (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001bb2:	2380      	movs	r3, #128	; 0x80
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	e024      	b.n	8001c02 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d107      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc0:	4b6a      	ldr	r3, [pc, #424]	; (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d109      	bne.n	8001be0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0c6      	b.n	8001d5e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd0:	4b66      	ldr	r3, [pc, #408]	; (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0be      	b.n	8001d5e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001be0:	f000 f8ce 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8001be4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4a61      	ldr	r2, [pc, #388]	; (8001d70 <HAL_RCC_ClockConfig+0x268>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d909      	bls.n	8001c02 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bee:	4b5f      	ldr	r3, [pc, #380]	; (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bf6:	4a5d      	ldr	r2, [pc, #372]	; (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bfc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001bfe:	2380      	movs	r3, #128	; 0x80
 8001c00:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c02:	4b5a      	ldr	r3, [pc, #360]	; (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f023 0203 	bic.w	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	4957      	ldr	r1, [pc, #348]	; (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c14:	f7ff f8c6 	bl	8000da4 <HAL_GetTick>
 8001c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1a:	e00a      	b.n	8001c32 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1c:	f7ff f8c2 	bl	8000da4 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e095      	b.n	8001d5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c32:	4b4e      	ldr	r3, [pc, #312]	; (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 020c 	and.w	r2, r3, #12
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d1eb      	bne.n	8001c1c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d023      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c5c:	4b43      	ldr	r3, [pc, #268]	; (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	4a42      	ldr	r2, [pc, #264]	; (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001c62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c66:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d007      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001c74:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001c7c:	4a3b      	ldr	r2, [pc, #236]	; (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001c7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c84:	4b39      	ldr	r3, [pc, #228]	; (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	4936      	ldr	r1, [pc, #216]	; (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
 8001c96:	e008      	b.n	8001caa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2b80      	cmp	r3, #128	; 0x80
 8001c9c:	d105      	bne.n	8001caa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c9e:	4b33      	ldr	r3, [pc, #204]	; (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	4a32      	ldr	r2, [pc, #200]	; (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001ca4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ca8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001caa:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d21d      	bcs.n	8001cf4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f023 020f 	bic.w	r2, r3, #15
 8001cc0:	4929      	ldr	r1, [pc, #164]	; (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cc8:	f7ff f86c 	bl	8000da4 <HAL_GetTick>
 8001ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cce:	e00a      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd0:	f7ff f868 	bl	8000da4 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e03b      	b.n	8001d5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce6:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d1ed      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d00:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	4917      	ldr	r1, [pc, #92]	; (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d009      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d1e:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	490f      	ldr	r1, [pc, #60]	; (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d32:	f000 f825 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8001d36:	4602      	mov	r2, r0
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <HAL_RCC_ClockConfig+0x264>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	490c      	ldr	r1, [pc, #48]	; (8001d74 <HAL_RCC_ClockConfig+0x26c>)
 8001d44:	5ccb      	ldrb	r3, [r1, r3]
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <HAL_RCC_ClockConfig+0x270>)
 8001d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_RCC_ClockConfig+0x274>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe ffd8 	bl	8000d0c <HAL_InitTick>
 8001d5c:	4603      	mov	r3, r0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40022000 	.word	0x40022000
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	04c4b400 	.word	0x04c4b400
 8001d74:	08003e6c 	.word	0x08003e6c
 8001d78:	20000038 	.word	0x20000038
 8001d7c:	2000003c 	.word	0x2000003c

08001d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d86:	4b2c      	ldr	r3, [pc, #176]	; (8001e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d102      	bne.n	8001d98 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d92:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	e047      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d98:	4b27      	ldr	r3, [pc, #156]	; (8001e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 030c 	and.w	r3, r3, #12
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d102      	bne.n	8001daa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001da4:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	e03e      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001daa:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b0c      	cmp	r3, #12
 8001db4:	d136      	bne.n	8001e24 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001db6:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	3301      	adds	r3, #1
 8001dcc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d10c      	bne.n	8001dee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dd4:	4a1a      	ldr	r2, [pc, #104]	; (8001e40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ddc:	4a16      	ldr	r2, [pc, #88]	; (8001e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dde:	68d2      	ldr	r2, [r2, #12]
 8001de0:	0a12      	lsrs	r2, r2, #8
 8001de2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001de6:	fb02 f303 	mul.w	r3, r2, r3
 8001dea:	617b      	str	r3, [r7, #20]
      break;
 8001dec:	e00c      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dee:	4a13      	ldr	r2, [pc, #76]	; (8001e3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df6:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001df8:	68d2      	ldr	r2, [r2, #12]
 8001dfa:	0a12      	lsrs	r2, r2, #8
 8001dfc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e00:	fb02 f303 	mul.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
      break;
 8001e06:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	0e5b      	lsrs	r3, r3, #25
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	3301      	adds	r3, #1
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	e001      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e28:	693b      	ldr	r3, [r7, #16]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	371c      	adds	r7, #28
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	00f42400 	.word	0x00f42400
 8001e40:	016e3600 	.word	0x016e3600

08001e44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000038 	.word	0x20000038

08001e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e60:	f7ff fff0 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e64:	4602      	mov	r2, r0
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	0a1b      	lsrs	r3, r3, #8
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	4904      	ldr	r1, [pc, #16]	; (8001e84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e72:	5ccb      	ldrb	r3, [r1, r3]
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000
 8001e84:	08003e7c 	.word	0x08003e7c

08001e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e8c:	f7ff ffda 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e90:	4602      	mov	r2, r0
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	0adb      	lsrs	r3, r3, #11
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	4904      	ldr	r1, [pc, #16]	; (8001eb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ea0:	f003 031f 	and.w	r3, r3, #31
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	08003e7c 	.word	0x08003e7c

08001eb4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eba:	4b1e      	ldr	r3, [pc, #120]	; (8001f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	3301      	adds	r3, #1
 8001ed0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d10c      	bne.n	8001ef2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ed8:	4a17      	ldr	r2, [pc, #92]	; (8001f38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee0:	4a14      	ldr	r2, [pc, #80]	; (8001f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ee2:	68d2      	ldr	r2, [r2, #12]
 8001ee4:	0a12      	lsrs	r2, r2, #8
 8001ee6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
 8001eee:	617b      	str	r3, [r7, #20]
    break;
 8001ef0:	e00c      	b.n	8001f0c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ef2:	4a12      	ldr	r2, [pc, #72]	; (8001f3c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efa:	4a0e      	ldr	r2, [pc, #56]	; (8001f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001efc:	68d2      	ldr	r2, [r2, #12]
 8001efe:	0a12      	lsrs	r2, r2, #8
 8001f00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f04:	fb02 f303 	mul.w	r3, r2, r3
 8001f08:	617b      	str	r3, [r7, #20]
    break;
 8001f0a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f0c:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	0e5b      	lsrs	r3, r3, #25
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	3301      	adds	r3, #1
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f24:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f26:	687b      	ldr	r3, [r7, #4]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	371c      	adds	r7, #28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	40021000 	.word	0x40021000
 8001f38:	016e3600 	.word	0x016e3600
 8001f3c:	00f42400 	.word	0x00f42400

08001f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f48:	2300      	movs	r3, #0
 8001f4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 8098 	beq.w	800208e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f62:	4b43      	ldr	r3, [pc, #268]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10d      	bne.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6e:	4b40      	ldr	r3, [pc, #256]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f72:	4a3f      	ldr	r2, [pc, #252]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f78:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7a:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f86:	2301      	movs	r3, #1
 8001f88:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f8a:	4b3a      	ldr	r3, [pc, #232]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a39      	ldr	r2, [pc, #228]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f96:	f7fe ff05 	bl	8000da4 <HAL_GetTick>
 8001f9a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f9c:	e009      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9e:	f7fe ff01 	bl	8000da4 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d902      	bls.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	74fb      	strb	r3, [r7, #19]
        break;
 8001fb0:	e005      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fb2:	4b30      	ldr	r3, [pc, #192]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0ef      	beq.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001fbe:	7cfb      	ldrb	r3, [r7, #19]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d159      	bne.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fc4:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d01e      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d019      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fe0:	4b23      	ldr	r3, [pc, #140]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fec:	4b20      	ldr	r3, [pc, #128]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff2:	4a1f      	ldr	r2, [pc, #124]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ffc:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002002:	4a1b      	ldr	r2, [pc, #108]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800200c:	4a18      	ldr	r2, [pc, #96]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d016      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7fe fec1 	bl	8000da4 <HAL_GetTick>
 8002022:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002024:	e00b      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7fe febd 	bl	8000da4 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f241 3288 	movw	r2, #5000	; 0x1388
 8002034:	4293      	cmp	r3, r2
 8002036:	d902      	bls.n	800203e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	74fb      	strb	r3, [r7, #19]
            break;
 800203c:	e006      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0ec      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800204c:	7cfb      	ldrb	r3, [r7, #19]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10b      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002052:	4b07      	ldr	r3, [pc, #28]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002058:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002060:	4903      	ldr	r1, [pc, #12]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002068:	e008      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800206a:	7cfb      	ldrb	r3, [r7, #19]
 800206c:	74bb      	strb	r3, [r7, #18]
 800206e:	e005      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002070:	40021000 	.word	0x40021000
 8002074:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002078:	7cfb      	ldrb	r3, [r7, #19]
 800207a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800207c:	7c7b      	ldrb	r3, [r7, #17]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d105      	bne.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002082:	4ba7      	ldr	r3, [pc, #668]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	4aa6      	ldr	r2, [pc, #664]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800208c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800209a:	4ba1      	ldr	r3, [pc, #644]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800209c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a0:	f023 0203 	bic.w	r2, r3, #3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	499d      	ldr	r1, [pc, #628]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020bc:	4b98      	ldr	r3, [pc, #608]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c2:	f023 020c 	bic.w	r2, r3, #12
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	4995      	ldr	r1, [pc, #596]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00a      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020de:	4b90      	ldr	r3, [pc, #576]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	498c      	ldr	r1, [pc, #560]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002100:	4b87      	ldr	r3, [pc, #540]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002106:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	4984      	ldr	r1, [pc, #528]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002122:	4b7f      	ldr	r3, [pc, #508]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002128:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	497b      	ldr	r1, [pc, #492]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0320 	and.w	r3, r3, #32
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002144:	4b76      	ldr	r3, [pc, #472]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	4973      	ldr	r1, [pc, #460]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002166:	4b6e      	ldr	r3, [pc, #440]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	496a      	ldr	r1, [pc, #424]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002188:	4b65      	ldr	r3, [pc, #404]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800218a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	4962      	ldr	r1, [pc, #392]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021aa:	4b5d      	ldr	r3, [pc, #372]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	4959      	ldr	r1, [pc, #356]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80021cc:	4b54      	ldr	r3, [pc, #336]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021d2:	f023 0203 	bic.w	r2, r3, #3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021da:	4951      	ldr	r1, [pc, #324]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021ee:	4b4c      	ldr	r3, [pc, #304]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	4948      	ldr	r1, [pc, #288]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220c:	2b00      	cmp	r3, #0
 800220e:	d015      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002210:	4b43      	ldr	r3, [pc, #268]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002216:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4940      	ldr	r1, [pc, #256]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800222e:	d105      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002230:	4b3b      	ldr	r3, [pc, #236]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4a3a      	ldr	r2, [pc, #232]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800223a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002244:	2b00      	cmp	r3, #0
 8002246:	d015      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002248:	4b35      	ldr	r3, [pc, #212]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002256:	4932      	ldr	r1, [pc, #200]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002266:	d105      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002268:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4a2c      	ldr	r2, [pc, #176]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800226e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002272:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d015      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002280:	4b27      	ldr	r3, [pc, #156]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002286:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228e:	4924      	ldr	r1, [pc, #144]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800229e:	d105      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022a0:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4a1e      	ldr	r2, [pc, #120]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d015      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022b8:	4b19      	ldr	r3, [pc, #100]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	4916      	ldr	r1, [pc, #88]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022d6:	d105      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4a10      	ldr	r2, [pc, #64]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d019      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	4908      	ldr	r1, [pc, #32]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800230e:	d109      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a02      	ldr	r2, [pc, #8]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800231a:	60d3      	str	r3, [r2, #12]
 800231c:	e002      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d015      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002330:	4b29      	ldr	r3, [pc, #164]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002336:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233e:	4926      	ldr	r1, [pc, #152]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800234e:	d105      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002350:	4b21      	ldr	r3, [pc, #132]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	4a20      	ldr	r2, [pc, #128]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d015      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002368:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002376:	4918      	ldr	r1, [pc, #96]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002386:	d105      	bne.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002388:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800238e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002392:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d015      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80023a0:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ae:	490a      	ldr	r1, [pc, #40]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023be:	d105      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4a04      	ldr	r2, [pc, #16]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80023cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000

080023dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e042      	b.n	8002474 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d106      	bne.n	8002406 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7fe fb01 	bl	8000a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2224      	movs	r2, #36	; 0x24
 800240a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0201 	bic.w	r2, r2, #1
 800241c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f82c 	bl	800247c <UART_SetConfig>
 8002424:	4603      	mov	r3, r0
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e022      	b.n	8002474 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 fb1c 	bl	8002a74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800244a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800245a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 fba3 	bl	8002bb8 <UART_CheckIdleState>
 8002472:	4603      	mov	r3, r0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800247c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002480:	b08c      	sub	sp, #48	; 0x30
 8002482:	af00      	add	r7, sp, #0
 8002484:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	431a      	orrs	r2, r3
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	431a      	orrs	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	4baa      	ldr	r3, [pc, #680]	; (8002754 <UART_SetConfig+0x2d8>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024b4:	430b      	orrs	r3, r1
 80024b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a9f      	ldr	r2, [pc, #636]	; (8002758 <UART_SetConfig+0x2dc>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d004      	beq.n	80024e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024e4:	4313      	orrs	r3, r2
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80024f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024fc:	430b      	orrs	r3, r1
 80024fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	f023 010f 	bic.w	r1, r3, #15
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a90      	ldr	r2, [pc, #576]	; (800275c <UART_SetConfig+0x2e0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d125      	bne.n	800256c <UART_SetConfig+0xf0>
 8002520:	4b8f      	ldr	r3, [pc, #572]	; (8002760 <UART_SetConfig+0x2e4>)
 8002522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	2b03      	cmp	r3, #3
 800252c:	d81a      	bhi.n	8002564 <UART_SetConfig+0xe8>
 800252e:	a201      	add	r2, pc, #4	; (adr r2, 8002534 <UART_SetConfig+0xb8>)
 8002530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002534:	08002545 	.word	0x08002545
 8002538:	08002555 	.word	0x08002555
 800253c:	0800254d 	.word	0x0800254d
 8002540:	0800255d 	.word	0x0800255d
 8002544:	2301      	movs	r3, #1
 8002546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800254a:	e116      	b.n	800277a <UART_SetConfig+0x2fe>
 800254c:	2302      	movs	r3, #2
 800254e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002552:	e112      	b.n	800277a <UART_SetConfig+0x2fe>
 8002554:	2304      	movs	r3, #4
 8002556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800255a:	e10e      	b.n	800277a <UART_SetConfig+0x2fe>
 800255c:	2308      	movs	r3, #8
 800255e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002562:	e10a      	b.n	800277a <UART_SetConfig+0x2fe>
 8002564:	2310      	movs	r3, #16
 8002566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800256a:	e106      	b.n	800277a <UART_SetConfig+0x2fe>
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a7c      	ldr	r2, [pc, #496]	; (8002764 <UART_SetConfig+0x2e8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d138      	bne.n	80025e8 <UART_SetConfig+0x16c>
 8002576:	4b7a      	ldr	r3, [pc, #488]	; (8002760 <UART_SetConfig+0x2e4>)
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b0c      	cmp	r3, #12
 8002582:	d82d      	bhi.n	80025e0 <UART_SetConfig+0x164>
 8002584:	a201      	add	r2, pc, #4	; (adr r2, 800258c <UART_SetConfig+0x110>)
 8002586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258a:	bf00      	nop
 800258c:	080025c1 	.word	0x080025c1
 8002590:	080025e1 	.word	0x080025e1
 8002594:	080025e1 	.word	0x080025e1
 8002598:	080025e1 	.word	0x080025e1
 800259c:	080025d1 	.word	0x080025d1
 80025a0:	080025e1 	.word	0x080025e1
 80025a4:	080025e1 	.word	0x080025e1
 80025a8:	080025e1 	.word	0x080025e1
 80025ac:	080025c9 	.word	0x080025c9
 80025b0:	080025e1 	.word	0x080025e1
 80025b4:	080025e1 	.word	0x080025e1
 80025b8:	080025e1 	.word	0x080025e1
 80025bc:	080025d9 	.word	0x080025d9
 80025c0:	2300      	movs	r3, #0
 80025c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025c6:	e0d8      	b.n	800277a <UART_SetConfig+0x2fe>
 80025c8:	2302      	movs	r3, #2
 80025ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025ce:	e0d4      	b.n	800277a <UART_SetConfig+0x2fe>
 80025d0:	2304      	movs	r3, #4
 80025d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025d6:	e0d0      	b.n	800277a <UART_SetConfig+0x2fe>
 80025d8:	2308      	movs	r3, #8
 80025da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025de:	e0cc      	b.n	800277a <UART_SetConfig+0x2fe>
 80025e0:	2310      	movs	r3, #16
 80025e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025e6:	e0c8      	b.n	800277a <UART_SetConfig+0x2fe>
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a5e      	ldr	r2, [pc, #376]	; (8002768 <UART_SetConfig+0x2ec>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d125      	bne.n	800263e <UART_SetConfig+0x1c2>
 80025f2:	4b5b      	ldr	r3, [pc, #364]	; (8002760 <UART_SetConfig+0x2e4>)
 80025f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80025fc:	2b30      	cmp	r3, #48	; 0x30
 80025fe:	d016      	beq.n	800262e <UART_SetConfig+0x1b2>
 8002600:	2b30      	cmp	r3, #48	; 0x30
 8002602:	d818      	bhi.n	8002636 <UART_SetConfig+0x1ba>
 8002604:	2b20      	cmp	r3, #32
 8002606:	d00a      	beq.n	800261e <UART_SetConfig+0x1a2>
 8002608:	2b20      	cmp	r3, #32
 800260a:	d814      	bhi.n	8002636 <UART_SetConfig+0x1ba>
 800260c:	2b00      	cmp	r3, #0
 800260e:	d002      	beq.n	8002616 <UART_SetConfig+0x19a>
 8002610:	2b10      	cmp	r3, #16
 8002612:	d008      	beq.n	8002626 <UART_SetConfig+0x1aa>
 8002614:	e00f      	b.n	8002636 <UART_SetConfig+0x1ba>
 8002616:	2300      	movs	r3, #0
 8002618:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800261c:	e0ad      	b.n	800277a <UART_SetConfig+0x2fe>
 800261e:	2302      	movs	r3, #2
 8002620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002624:	e0a9      	b.n	800277a <UART_SetConfig+0x2fe>
 8002626:	2304      	movs	r3, #4
 8002628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800262c:	e0a5      	b.n	800277a <UART_SetConfig+0x2fe>
 800262e:	2308      	movs	r3, #8
 8002630:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002634:	e0a1      	b.n	800277a <UART_SetConfig+0x2fe>
 8002636:	2310      	movs	r3, #16
 8002638:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800263c:	e09d      	b.n	800277a <UART_SetConfig+0x2fe>
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a4a      	ldr	r2, [pc, #296]	; (800276c <UART_SetConfig+0x2f0>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d125      	bne.n	8002694 <UART_SetConfig+0x218>
 8002648:	4b45      	ldr	r3, [pc, #276]	; (8002760 <UART_SetConfig+0x2e4>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002652:	2bc0      	cmp	r3, #192	; 0xc0
 8002654:	d016      	beq.n	8002684 <UART_SetConfig+0x208>
 8002656:	2bc0      	cmp	r3, #192	; 0xc0
 8002658:	d818      	bhi.n	800268c <UART_SetConfig+0x210>
 800265a:	2b80      	cmp	r3, #128	; 0x80
 800265c:	d00a      	beq.n	8002674 <UART_SetConfig+0x1f8>
 800265e:	2b80      	cmp	r3, #128	; 0x80
 8002660:	d814      	bhi.n	800268c <UART_SetConfig+0x210>
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <UART_SetConfig+0x1f0>
 8002666:	2b40      	cmp	r3, #64	; 0x40
 8002668:	d008      	beq.n	800267c <UART_SetConfig+0x200>
 800266a:	e00f      	b.n	800268c <UART_SetConfig+0x210>
 800266c:	2300      	movs	r3, #0
 800266e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002672:	e082      	b.n	800277a <UART_SetConfig+0x2fe>
 8002674:	2302      	movs	r3, #2
 8002676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800267a:	e07e      	b.n	800277a <UART_SetConfig+0x2fe>
 800267c:	2304      	movs	r3, #4
 800267e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002682:	e07a      	b.n	800277a <UART_SetConfig+0x2fe>
 8002684:	2308      	movs	r3, #8
 8002686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800268a:	e076      	b.n	800277a <UART_SetConfig+0x2fe>
 800268c:	2310      	movs	r3, #16
 800268e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002692:	e072      	b.n	800277a <UART_SetConfig+0x2fe>
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a35      	ldr	r2, [pc, #212]	; (8002770 <UART_SetConfig+0x2f4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d12a      	bne.n	80026f4 <UART_SetConfig+0x278>
 800269e:	4b30      	ldr	r3, [pc, #192]	; (8002760 <UART_SetConfig+0x2e4>)
 80026a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026ac:	d01a      	beq.n	80026e4 <UART_SetConfig+0x268>
 80026ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026b2:	d81b      	bhi.n	80026ec <UART_SetConfig+0x270>
 80026b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b8:	d00c      	beq.n	80026d4 <UART_SetConfig+0x258>
 80026ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026be:	d815      	bhi.n	80026ec <UART_SetConfig+0x270>
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <UART_SetConfig+0x250>
 80026c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c8:	d008      	beq.n	80026dc <UART_SetConfig+0x260>
 80026ca:	e00f      	b.n	80026ec <UART_SetConfig+0x270>
 80026cc:	2300      	movs	r3, #0
 80026ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026d2:	e052      	b.n	800277a <UART_SetConfig+0x2fe>
 80026d4:	2302      	movs	r3, #2
 80026d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026da:	e04e      	b.n	800277a <UART_SetConfig+0x2fe>
 80026dc:	2304      	movs	r3, #4
 80026de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026e2:	e04a      	b.n	800277a <UART_SetConfig+0x2fe>
 80026e4:	2308      	movs	r3, #8
 80026e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026ea:	e046      	b.n	800277a <UART_SetConfig+0x2fe>
 80026ec:	2310      	movs	r3, #16
 80026ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026f2:	e042      	b.n	800277a <UART_SetConfig+0x2fe>
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a17      	ldr	r2, [pc, #92]	; (8002758 <UART_SetConfig+0x2dc>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d13a      	bne.n	8002774 <UART_SetConfig+0x2f8>
 80026fe:	4b18      	ldr	r3, [pc, #96]	; (8002760 <UART_SetConfig+0x2e4>)
 8002700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002704:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002708:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800270c:	d01a      	beq.n	8002744 <UART_SetConfig+0x2c8>
 800270e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002712:	d81b      	bhi.n	800274c <UART_SetConfig+0x2d0>
 8002714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002718:	d00c      	beq.n	8002734 <UART_SetConfig+0x2b8>
 800271a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800271e:	d815      	bhi.n	800274c <UART_SetConfig+0x2d0>
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <UART_SetConfig+0x2b0>
 8002724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002728:	d008      	beq.n	800273c <UART_SetConfig+0x2c0>
 800272a:	e00f      	b.n	800274c <UART_SetConfig+0x2d0>
 800272c:	2300      	movs	r3, #0
 800272e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002732:	e022      	b.n	800277a <UART_SetConfig+0x2fe>
 8002734:	2302      	movs	r3, #2
 8002736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800273a:	e01e      	b.n	800277a <UART_SetConfig+0x2fe>
 800273c:	2304      	movs	r3, #4
 800273e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002742:	e01a      	b.n	800277a <UART_SetConfig+0x2fe>
 8002744:	2308      	movs	r3, #8
 8002746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800274a:	e016      	b.n	800277a <UART_SetConfig+0x2fe>
 800274c:	2310      	movs	r3, #16
 800274e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002752:	e012      	b.n	800277a <UART_SetConfig+0x2fe>
 8002754:	cfff69f3 	.word	0xcfff69f3
 8002758:	40008000 	.word	0x40008000
 800275c:	40013800 	.word	0x40013800
 8002760:	40021000 	.word	0x40021000
 8002764:	40004400 	.word	0x40004400
 8002768:	40004800 	.word	0x40004800
 800276c:	40004c00 	.word	0x40004c00
 8002770:	40005000 	.word	0x40005000
 8002774:	2310      	movs	r3, #16
 8002776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4aae      	ldr	r2, [pc, #696]	; (8002a38 <UART_SetConfig+0x5bc>)
 8002780:	4293      	cmp	r3, r2
 8002782:	f040 8097 	bne.w	80028b4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002786:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800278a:	2b08      	cmp	r3, #8
 800278c:	d823      	bhi.n	80027d6 <UART_SetConfig+0x35a>
 800278e:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <UART_SetConfig+0x318>)
 8002790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002794:	080027b9 	.word	0x080027b9
 8002798:	080027d7 	.word	0x080027d7
 800279c:	080027c1 	.word	0x080027c1
 80027a0:	080027d7 	.word	0x080027d7
 80027a4:	080027c7 	.word	0x080027c7
 80027a8:	080027d7 	.word	0x080027d7
 80027ac:	080027d7 	.word	0x080027d7
 80027b0:	080027d7 	.word	0x080027d7
 80027b4:	080027cf 	.word	0x080027cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027b8:	f7ff fb50 	bl	8001e5c <HAL_RCC_GetPCLK1Freq>
 80027bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80027be:	e010      	b.n	80027e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027c0:	4b9e      	ldr	r3, [pc, #632]	; (8002a3c <UART_SetConfig+0x5c0>)
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80027c4:	e00d      	b.n	80027e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027c6:	f7ff fadb 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 80027ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80027cc:	e009      	b.n	80027e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80027d4:	e005      	b.n	80027e2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80027e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 8130 	beq.w	8002a4a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	4a94      	ldr	r2, [pc, #592]	; (8002a40 <UART_SetConfig+0x5c4>)
 80027f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027f4:	461a      	mov	r2, r3
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	429a      	cmp	r2, r3
 800280c:	d305      	bcc.n	800281a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	429a      	cmp	r2, r3
 8002818:	d903      	bls.n	8002822 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002820:	e113      	b.n	8002a4a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	2200      	movs	r2, #0
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	60fa      	str	r2, [r7, #12]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	4a84      	ldr	r2, [pc, #528]	; (8002a40 <UART_SetConfig+0x5c4>)
 8002830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002834:	b29b      	uxth	r3, r3
 8002836:	2200      	movs	r2, #0
 8002838:	603b      	str	r3, [r7, #0]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002840:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002844:	f7fd fd3c 	bl	80002c0 <__aeabi_uldivmod>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4610      	mov	r0, r2
 800284e:	4619      	mov	r1, r3
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	020b      	lsls	r3, r1, #8
 800285a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800285e:	0202      	lsls	r2, r0, #8
 8002860:	6979      	ldr	r1, [r7, #20]
 8002862:	6849      	ldr	r1, [r1, #4]
 8002864:	0849      	lsrs	r1, r1, #1
 8002866:	2000      	movs	r0, #0
 8002868:	460c      	mov	r4, r1
 800286a:	4605      	mov	r5, r0
 800286c:	eb12 0804 	adds.w	r8, r2, r4
 8002870:	eb43 0905 	adc.w	r9, r3, r5
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	469a      	mov	sl, r3
 800287c:	4693      	mov	fp, r2
 800287e:	4652      	mov	r2, sl
 8002880:	465b      	mov	r3, fp
 8002882:	4640      	mov	r0, r8
 8002884:	4649      	mov	r1, r9
 8002886:	f7fd fd1b 	bl	80002c0 <__aeabi_uldivmod>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4613      	mov	r3, r2
 8002890:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002898:	d308      	bcc.n	80028ac <UART_SetConfig+0x430>
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028a0:	d204      	bcs.n	80028ac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6a3a      	ldr	r2, [r7, #32]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	e0ce      	b.n	8002a4a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80028b2:	e0ca      	b.n	8002a4a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028bc:	d166      	bne.n	800298c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80028be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d827      	bhi.n	8002916 <UART_SetConfig+0x49a>
 80028c6:	a201      	add	r2, pc, #4	; (adr r2, 80028cc <UART_SetConfig+0x450>)
 80028c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028cc:	080028f1 	.word	0x080028f1
 80028d0:	080028f9 	.word	0x080028f9
 80028d4:	08002901 	.word	0x08002901
 80028d8:	08002917 	.word	0x08002917
 80028dc:	08002907 	.word	0x08002907
 80028e0:	08002917 	.word	0x08002917
 80028e4:	08002917 	.word	0x08002917
 80028e8:	08002917 	.word	0x08002917
 80028ec:	0800290f 	.word	0x0800290f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028f0:	f7ff fab4 	bl	8001e5c <HAL_RCC_GetPCLK1Freq>
 80028f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80028f6:	e014      	b.n	8002922 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028f8:	f7ff fac6 	bl	8001e88 <HAL_RCC_GetPCLK2Freq>
 80028fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80028fe:	e010      	b.n	8002922 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002900:	4b4e      	ldr	r3, [pc, #312]	; (8002a3c <UART_SetConfig+0x5c0>)
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002904:	e00d      	b.n	8002922 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002906:	f7ff fa3b 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 800290a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800290c:	e009      	b.n	8002922 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800290e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002914:	e005      	b.n	8002922 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002920:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8090 	beq.w	8002a4a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	4a44      	ldr	r2, [pc, #272]	; (8002a40 <UART_SetConfig+0x5c4>)
 8002930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002934:	461a      	mov	r2, r3
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	fbb3 f3f2 	udiv	r3, r3, r2
 800293c:	005a      	lsls	r2, r3, #1
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	085b      	lsrs	r3, r3, #1
 8002944:	441a      	add	r2, r3
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	fbb2 f3f3 	udiv	r3, r2, r3
 800294e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	2b0f      	cmp	r3, #15
 8002954:	d916      	bls.n	8002984 <UART_SetConfig+0x508>
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800295c:	d212      	bcs.n	8002984 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	b29b      	uxth	r3, r3
 8002962:	f023 030f 	bic.w	r3, r3, #15
 8002966:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	b29b      	uxth	r3, r3
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	b29a      	uxth	r2, r3
 8002974:	8bfb      	ldrh	r3, [r7, #30]
 8002976:	4313      	orrs	r3, r2
 8002978:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	8bfa      	ldrh	r2, [r7, #30]
 8002980:	60da      	str	r2, [r3, #12]
 8002982:	e062      	b.n	8002a4a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800298a:	e05e      	b.n	8002a4a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800298c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002990:	2b08      	cmp	r3, #8
 8002992:	d828      	bhi.n	80029e6 <UART_SetConfig+0x56a>
 8002994:	a201      	add	r2, pc, #4	; (adr r2, 800299c <UART_SetConfig+0x520>)
 8002996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299a:	bf00      	nop
 800299c:	080029c1 	.word	0x080029c1
 80029a0:	080029c9 	.word	0x080029c9
 80029a4:	080029d1 	.word	0x080029d1
 80029a8:	080029e7 	.word	0x080029e7
 80029ac:	080029d7 	.word	0x080029d7
 80029b0:	080029e7 	.word	0x080029e7
 80029b4:	080029e7 	.word	0x080029e7
 80029b8:	080029e7 	.word	0x080029e7
 80029bc:	080029df 	.word	0x080029df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029c0:	f7ff fa4c 	bl	8001e5c <HAL_RCC_GetPCLK1Freq>
 80029c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80029c6:	e014      	b.n	80029f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029c8:	f7ff fa5e 	bl	8001e88 <HAL_RCC_GetPCLK2Freq>
 80029cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80029ce:	e010      	b.n	80029f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029d0:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <UART_SetConfig+0x5c0>)
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80029d4:	e00d      	b.n	80029f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029d6:	f7ff f9d3 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 80029da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80029dc:	e009      	b.n	80029f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80029e4:	e005      	b.n	80029f2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80029f0:	bf00      	nop
    }

    if (pclk != 0U)
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d028      	beq.n	8002a4a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	4a10      	ldr	r2, [pc, #64]	; (8002a40 <UART_SetConfig+0x5c4>)
 80029fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a02:	461a      	mov	r2, r3
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	fbb3 f2f2 	udiv	r2, r3, r2
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	085b      	lsrs	r3, r3, #1
 8002a10:	441a      	add	r2, r3
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	2b0f      	cmp	r3, #15
 8002a20:	d910      	bls.n	8002a44 <UART_SetConfig+0x5c8>
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a28:	d20c      	bcs.n	8002a44 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	60da      	str	r2, [r3, #12]
 8002a34:	e009      	b.n	8002a4a <UART_SetConfig+0x5ce>
 8002a36:	bf00      	nop
 8002a38:	40008000 	.word	0x40008000
 8002a3c:	00f42400 	.word	0x00f42400
 8002a40:	08003e84 	.word	0x08003e84
      }
      else
      {
        ret = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2200      	movs	r2, #0
 8002a64:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002a66:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3730      	adds	r7, #48	; 0x30
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002a74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00a      	beq.n	8002a9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00a      	beq.n	8002ae2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00a      	beq.n	8002b26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00a      	beq.n	8002b48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01a      	beq.n	8002b8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b72:	d10a      	bne.n	8002b8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	605a      	str	r2, [r3, #4]
  }
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002bc8:	f7fe f8ec 	bl	8000da4 <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d10e      	bne.n	8002bfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f82f 	bl	8002c4e <UART_WaitOnFlagUntilTimeout>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e025      	b.n	8002c46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d10e      	bne.n	8002c26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f819 	bl	8002c4e <UART_WaitOnFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e00f      	b.n	8002c46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b09c      	sub	sp, #112	; 0x70
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	603b      	str	r3, [r7, #0]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c5e:	e0a9      	b.n	8002db4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c66:	f000 80a5 	beq.w	8002db4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c6a:	f7fe f89b 	bl	8000da4 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d302      	bcc.n	8002c80 <UART_WaitOnFlagUntilTimeout+0x32>
 8002c7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d140      	bne.n	8002d02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c88:	e853 3f00 	ldrex	r3, [r3]
 8002c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c94:	667b      	str	r3, [r7, #100]	; 0x64
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ca0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002ca4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ca6:	e841 2300 	strex	r3, r2, [r1]
 8002caa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1e6      	bne.n	8002c80 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	3308      	adds	r3, #8
 8002cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cbc:	e853 3f00 	ldrex	r3, [r3]
 8002cc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	663b      	str	r3, [r7, #96]	; 0x60
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	3308      	adds	r3, #8
 8002cd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002cd2:	64ba      	str	r2, [r7, #72]	; 0x48
 8002cd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002cd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cda:	e841 2300 	strex	r3, r2, [r1]
 8002cde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1e5      	bne.n	8002cb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e069      	b.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d051      	beq.n	8002db4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d1e:	d149      	bne.n	8002db4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d32:	e853 3f00 	ldrex	r3, [r3]
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d48:	637b      	str	r3, [r7, #52]	; 0x34
 8002d4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d50:	e841 2300 	strex	r3, r2, [r1]
 8002d54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1e6      	bne.n	8002d2a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3308      	adds	r3, #8
 8002d62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	e853 3f00 	ldrex	r3, [r3]
 8002d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f023 0301 	bic.w	r3, r3, #1
 8002d72:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3308      	adds	r3, #8
 8002d7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d7c:	623a      	str	r2, [r7, #32]
 8002d7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d80:	69f9      	ldr	r1, [r7, #28]
 8002d82:	6a3a      	ldr	r2, [r7, #32]
 8002d84:	e841 2300 	strex	r3, r2, [r1]
 8002d88:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1e5      	bne.n	8002d5c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e010      	b.n	8002dd6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	69da      	ldr	r2, [r3, #28]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	bf0c      	ite	eq
 8002dc4:	2301      	moveq	r3, #1
 8002dc6:	2300      	movne	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	461a      	mov	r2, r3
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	f43f af46 	beq.w	8002c60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3770      	adds	r7, #112	; 0x70
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b085      	sub	sp, #20
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_UARTEx_DisableFifoMode+0x16>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e027      	b.n	8002e44 <HAL_UARTEx_DisableFifoMode+0x66>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2224      	movs	r2, #36	; 0x24
 8002e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0201 	bic.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002e22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e02d      	b.n	8002ec4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2224      	movs	r2, #36	; 0x24
 8002e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0201 	bic.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f84f 	bl	8002f48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e02d      	b.n	8002f40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2224      	movs	r2, #36	; 0x24
 8002ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0201 	bic.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f811 	bl	8002f48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d108      	bne.n	8002f6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002f68:	e031      	b.n	8002fce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002f6a:	2308      	movs	r3, #8
 8002f6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002f6e:	2308      	movs	r3, #8
 8002f70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	0e5b      	lsrs	r3, r3, #25
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	0f5b      	lsrs	r3, r3, #29
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002f92:	7bbb      	ldrb	r3, [r7, #14]
 8002f94:	7b3a      	ldrb	r2, [r7, #12]
 8002f96:	4911      	ldr	r1, [pc, #68]	; (8002fdc <UARTEx_SetNbDataToProcess+0x94>)
 8002f98:	5c8a      	ldrb	r2, [r1, r2]
 8002f9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002f9e:	7b3a      	ldrb	r2, [r7, #12]
 8002fa0:	490f      	ldr	r1, [pc, #60]	; (8002fe0 <UARTEx_SetNbDataToProcess+0x98>)
 8002fa2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002fa4:	fb93 f3f2 	sdiv	r3, r3, r2
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	7b7a      	ldrb	r2, [r7, #13]
 8002fb4:	4909      	ldr	r1, [pc, #36]	; (8002fdc <UARTEx_SetNbDataToProcess+0x94>)
 8002fb6:	5c8a      	ldrb	r2, [r1, r2]
 8002fb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002fbc:	7b7a      	ldrb	r2, [r7, #13]
 8002fbe:	4908      	ldr	r1, [pc, #32]	; (8002fe0 <UARTEx_SetNbDataToProcess+0x98>)
 8002fc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002fc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8002fce:	bf00      	nop
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	08003e9c 	.word	0x08003e9c
 8002fe0:	08003ea4 	.word	0x08003ea4

08002fe4 <std>:
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	b510      	push	{r4, lr}
 8002fe8:	4604      	mov	r4, r0
 8002fea:	e9c0 3300 	strd	r3, r3, [r0]
 8002fee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ff2:	6083      	str	r3, [r0, #8]
 8002ff4:	8181      	strh	r1, [r0, #12]
 8002ff6:	6643      	str	r3, [r0, #100]	; 0x64
 8002ff8:	81c2      	strh	r2, [r0, #14]
 8002ffa:	6183      	str	r3, [r0, #24]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	2208      	movs	r2, #8
 8003000:	305c      	adds	r0, #92	; 0x5c
 8003002:	f000 f906 	bl	8003212 <memset>
 8003006:	4b0d      	ldr	r3, [pc, #52]	; (800303c <std+0x58>)
 8003008:	6263      	str	r3, [r4, #36]	; 0x24
 800300a:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <std+0x5c>)
 800300c:	62a3      	str	r3, [r4, #40]	; 0x28
 800300e:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <std+0x60>)
 8003010:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003012:	4b0d      	ldr	r3, [pc, #52]	; (8003048 <std+0x64>)
 8003014:	6323      	str	r3, [r4, #48]	; 0x30
 8003016:	4b0d      	ldr	r3, [pc, #52]	; (800304c <std+0x68>)
 8003018:	6224      	str	r4, [r4, #32]
 800301a:	429c      	cmp	r4, r3
 800301c:	d006      	beq.n	800302c <std+0x48>
 800301e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003022:	4294      	cmp	r4, r2
 8003024:	d002      	beq.n	800302c <std+0x48>
 8003026:	33d0      	adds	r3, #208	; 0xd0
 8003028:	429c      	cmp	r4, r3
 800302a:	d105      	bne.n	8003038 <std+0x54>
 800302c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003034:	f000 b966 	b.w	8003304 <__retarget_lock_init_recursive>
 8003038:	bd10      	pop	{r4, pc}
 800303a:	bf00      	nop
 800303c:	0800318d 	.word	0x0800318d
 8003040:	080031af 	.word	0x080031af
 8003044:	080031e7 	.word	0x080031e7
 8003048:	0800320b 	.word	0x0800320b
 800304c:	20000194 	.word	0x20000194

08003050 <stdio_exit_handler>:
 8003050:	4a02      	ldr	r2, [pc, #8]	; (800305c <stdio_exit_handler+0xc>)
 8003052:	4903      	ldr	r1, [pc, #12]	; (8003060 <stdio_exit_handler+0x10>)
 8003054:	4803      	ldr	r0, [pc, #12]	; (8003064 <stdio_exit_handler+0x14>)
 8003056:	f000 b869 	b.w	800312c <_fwalk_sglue>
 800305a:	bf00      	nop
 800305c:	20000044 	.word	0x20000044
 8003060:	08003bb1 	.word	0x08003bb1
 8003064:	20000050 	.word	0x20000050

08003068 <cleanup_stdio>:
 8003068:	6841      	ldr	r1, [r0, #4]
 800306a:	4b0c      	ldr	r3, [pc, #48]	; (800309c <cleanup_stdio+0x34>)
 800306c:	4299      	cmp	r1, r3
 800306e:	b510      	push	{r4, lr}
 8003070:	4604      	mov	r4, r0
 8003072:	d001      	beq.n	8003078 <cleanup_stdio+0x10>
 8003074:	f000 fd9c 	bl	8003bb0 <_fflush_r>
 8003078:	68a1      	ldr	r1, [r4, #8]
 800307a:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <cleanup_stdio+0x38>)
 800307c:	4299      	cmp	r1, r3
 800307e:	d002      	beq.n	8003086 <cleanup_stdio+0x1e>
 8003080:	4620      	mov	r0, r4
 8003082:	f000 fd95 	bl	8003bb0 <_fflush_r>
 8003086:	68e1      	ldr	r1, [r4, #12]
 8003088:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <cleanup_stdio+0x3c>)
 800308a:	4299      	cmp	r1, r3
 800308c:	d004      	beq.n	8003098 <cleanup_stdio+0x30>
 800308e:	4620      	mov	r0, r4
 8003090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003094:	f000 bd8c 	b.w	8003bb0 <_fflush_r>
 8003098:	bd10      	pop	{r4, pc}
 800309a:	bf00      	nop
 800309c:	20000194 	.word	0x20000194
 80030a0:	200001fc 	.word	0x200001fc
 80030a4:	20000264 	.word	0x20000264

080030a8 <global_stdio_init.part.0>:
 80030a8:	b510      	push	{r4, lr}
 80030aa:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <global_stdio_init.part.0+0x30>)
 80030ac:	4c0b      	ldr	r4, [pc, #44]	; (80030dc <global_stdio_init.part.0+0x34>)
 80030ae:	4a0c      	ldr	r2, [pc, #48]	; (80030e0 <global_stdio_init.part.0+0x38>)
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	4620      	mov	r0, r4
 80030b4:	2200      	movs	r2, #0
 80030b6:	2104      	movs	r1, #4
 80030b8:	f7ff ff94 	bl	8002fe4 <std>
 80030bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80030c0:	2201      	movs	r2, #1
 80030c2:	2109      	movs	r1, #9
 80030c4:	f7ff ff8e 	bl	8002fe4 <std>
 80030c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80030cc:	2202      	movs	r2, #2
 80030ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030d2:	2112      	movs	r1, #18
 80030d4:	f7ff bf86 	b.w	8002fe4 <std>
 80030d8:	200002cc 	.word	0x200002cc
 80030dc:	20000194 	.word	0x20000194
 80030e0:	08003051 	.word	0x08003051

080030e4 <__sfp_lock_acquire>:
 80030e4:	4801      	ldr	r0, [pc, #4]	; (80030ec <__sfp_lock_acquire+0x8>)
 80030e6:	f000 b90e 	b.w	8003306 <__retarget_lock_acquire_recursive>
 80030ea:	bf00      	nop
 80030ec:	200002d5 	.word	0x200002d5

080030f0 <__sfp_lock_release>:
 80030f0:	4801      	ldr	r0, [pc, #4]	; (80030f8 <__sfp_lock_release+0x8>)
 80030f2:	f000 b909 	b.w	8003308 <__retarget_lock_release_recursive>
 80030f6:	bf00      	nop
 80030f8:	200002d5 	.word	0x200002d5

080030fc <__sinit>:
 80030fc:	b510      	push	{r4, lr}
 80030fe:	4604      	mov	r4, r0
 8003100:	f7ff fff0 	bl	80030e4 <__sfp_lock_acquire>
 8003104:	6a23      	ldr	r3, [r4, #32]
 8003106:	b11b      	cbz	r3, 8003110 <__sinit+0x14>
 8003108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800310c:	f7ff bff0 	b.w	80030f0 <__sfp_lock_release>
 8003110:	4b04      	ldr	r3, [pc, #16]	; (8003124 <__sinit+0x28>)
 8003112:	6223      	str	r3, [r4, #32]
 8003114:	4b04      	ldr	r3, [pc, #16]	; (8003128 <__sinit+0x2c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1f5      	bne.n	8003108 <__sinit+0xc>
 800311c:	f7ff ffc4 	bl	80030a8 <global_stdio_init.part.0>
 8003120:	e7f2      	b.n	8003108 <__sinit+0xc>
 8003122:	bf00      	nop
 8003124:	08003069 	.word	0x08003069
 8003128:	200002cc 	.word	0x200002cc

0800312c <_fwalk_sglue>:
 800312c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003130:	4607      	mov	r7, r0
 8003132:	4688      	mov	r8, r1
 8003134:	4614      	mov	r4, r2
 8003136:	2600      	movs	r6, #0
 8003138:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800313c:	f1b9 0901 	subs.w	r9, r9, #1
 8003140:	d505      	bpl.n	800314e <_fwalk_sglue+0x22>
 8003142:	6824      	ldr	r4, [r4, #0]
 8003144:	2c00      	cmp	r4, #0
 8003146:	d1f7      	bne.n	8003138 <_fwalk_sglue+0xc>
 8003148:	4630      	mov	r0, r6
 800314a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800314e:	89ab      	ldrh	r3, [r5, #12]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d907      	bls.n	8003164 <_fwalk_sglue+0x38>
 8003154:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003158:	3301      	adds	r3, #1
 800315a:	d003      	beq.n	8003164 <_fwalk_sglue+0x38>
 800315c:	4629      	mov	r1, r5
 800315e:	4638      	mov	r0, r7
 8003160:	47c0      	blx	r8
 8003162:	4306      	orrs	r6, r0
 8003164:	3568      	adds	r5, #104	; 0x68
 8003166:	e7e9      	b.n	800313c <_fwalk_sglue+0x10>

08003168 <iprintf>:
 8003168:	b40f      	push	{r0, r1, r2, r3}
 800316a:	b507      	push	{r0, r1, r2, lr}
 800316c:	4906      	ldr	r1, [pc, #24]	; (8003188 <iprintf+0x20>)
 800316e:	ab04      	add	r3, sp, #16
 8003170:	6808      	ldr	r0, [r1, #0]
 8003172:	f853 2b04 	ldr.w	r2, [r3], #4
 8003176:	6881      	ldr	r1, [r0, #8]
 8003178:	9301      	str	r3, [sp, #4]
 800317a:	f000 f9e9 	bl	8003550 <_vfiprintf_r>
 800317e:	b003      	add	sp, #12
 8003180:	f85d eb04 	ldr.w	lr, [sp], #4
 8003184:	b004      	add	sp, #16
 8003186:	4770      	bx	lr
 8003188:	2000009c 	.word	0x2000009c

0800318c <__sread>:
 800318c:	b510      	push	{r4, lr}
 800318e:	460c      	mov	r4, r1
 8003190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003194:	f000 f868 	bl	8003268 <_read_r>
 8003198:	2800      	cmp	r0, #0
 800319a:	bfab      	itete	ge
 800319c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800319e:	89a3      	ldrhlt	r3, [r4, #12]
 80031a0:	181b      	addge	r3, r3, r0
 80031a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80031a6:	bfac      	ite	ge
 80031a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80031aa:	81a3      	strhlt	r3, [r4, #12]
 80031ac:	bd10      	pop	{r4, pc}

080031ae <__swrite>:
 80031ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031b2:	461f      	mov	r7, r3
 80031b4:	898b      	ldrh	r3, [r1, #12]
 80031b6:	05db      	lsls	r3, r3, #23
 80031b8:	4605      	mov	r5, r0
 80031ba:	460c      	mov	r4, r1
 80031bc:	4616      	mov	r6, r2
 80031be:	d505      	bpl.n	80031cc <__swrite+0x1e>
 80031c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031c4:	2302      	movs	r3, #2
 80031c6:	2200      	movs	r2, #0
 80031c8:	f000 f83c 	bl	8003244 <_lseek_r>
 80031cc:	89a3      	ldrh	r3, [r4, #12]
 80031ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031d6:	81a3      	strh	r3, [r4, #12]
 80031d8:	4632      	mov	r2, r6
 80031da:	463b      	mov	r3, r7
 80031dc:	4628      	mov	r0, r5
 80031de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031e2:	f000 b853 	b.w	800328c <_write_r>

080031e6 <__sseek>:
 80031e6:	b510      	push	{r4, lr}
 80031e8:	460c      	mov	r4, r1
 80031ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031ee:	f000 f829 	bl	8003244 <_lseek_r>
 80031f2:	1c43      	adds	r3, r0, #1
 80031f4:	89a3      	ldrh	r3, [r4, #12]
 80031f6:	bf15      	itete	ne
 80031f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80031fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80031fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003202:	81a3      	strheq	r3, [r4, #12]
 8003204:	bf18      	it	ne
 8003206:	81a3      	strhne	r3, [r4, #12]
 8003208:	bd10      	pop	{r4, pc}

0800320a <__sclose>:
 800320a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800320e:	f000 b809 	b.w	8003224 <_close_r>

08003212 <memset>:
 8003212:	4402      	add	r2, r0
 8003214:	4603      	mov	r3, r0
 8003216:	4293      	cmp	r3, r2
 8003218:	d100      	bne.n	800321c <memset+0xa>
 800321a:	4770      	bx	lr
 800321c:	f803 1b01 	strb.w	r1, [r3], #1
 8003220:	e7f9      	b.n	8003216 <memset+0x4>
	...

08003224 <_close_r>:
 8003224:	b538      	push	{r3, r4, r5, lr}
 8003226:	4d06      	ldr	r5, [pc, #24]	; (8003240 <_close_r+0x1c>)
 8003228:	2300      	movs	r3, #0
 800322a:	4604      	mov	r4, r0
 800322c:	4608      	mov	r0, r1
 800322e:	602b      	str	r3, [r5, #0]
 8003230:	f7fd fcad 	bl	8000b8e <_close>
 8003234:	1c43      	adds	r3, r0, #1
 8003236:	d102      	bne.n	800323e <_close_r+0x1a>
 8003238:	682b      	ldr	r3, [r5, #0]
 800323a:	b103      	cbz	r3, 800323e <_close_r+0x1a>
 800323c:	6023      	str	r3, [r4, #0]
 800323e:	bd38      	pop	{r3, r4, r5, pc}
 8003240:	200002d0 	.word	0x200002d0

08003244 <_lseek_r>:
 8003244:	b538      	push	{r3, r4, r5, lr}
 8003246:	4d07      	ldr	r5, [pc, #28]	; (8003264 <_lseek_r+0x20>)
 8003248:	4604      	mov	r4, r0
 800324a:	4608      	mov	r0, r1
 800324c:	4611      	mov	r1, r2
 800324e:	2200      	movs	r2, #0
 8003250:	602a      	str	r2, [r5, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	f7fd fcc2 	bl	8000bdc <_lseek>
 8003258:	1c43      	adds	r3, r0, #1
 800325a:	d102      	bne.n	8003262 <_lseek_r+0x1e>
 800325c:	682b      	ldr	r3, [r5, #0]
 800325e:	b103      	cbz	r3, 8003262 <_lseek_r+0x1e>
 8003260:	6023      	str	r3, [r4, #0]
 8003262:	bd38      	pop	{r3, r4, r5, pc}
 8003264:	200002d0 	.word	0x200002d0

08003268 <_read_r>:
 8003268:	b538      	push	{r3, r4, r5, lr}
 800326a:	4d07      	ldr	r5, [pc, #28]	; (8003288 <_read_r+0x20>)
 800326c:	4604      	mov	r4, r0
 800326e:	4608      	mov	r0, r1
 8003270:	4611      	mov	r1, r2
 8003272:	2200      	movs	r2, #0
 8003274:	602a      	str	r2, [r5, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	f7fd fc50 	bl	8000b1c <_read>
 800327c:	1c43      	adds	r3, r0, #1
 800327e:	d102      	bne.n	8003286 <_read_r+0x1e>
 8003280:	682b      	ldr	r3, [r5, #0]
 8003282:	b103      	cbz	r3, 8003286 <_read_r+0x1e>
 8003284:	6023      	str	r3, [r4, #0]
 8003286:	bd38      	pop	{r3, r4, r5, pc}
 8003288:	200002d0 	.word	0x200002d0

0800328c <_write_r>:
 800328c:	b538      	push	{r3, r4, r5, lr}
 800328e:	4d07      	ldr	r5, [pc, #28]	; (80032ac <_write_r+0x20>)
 8003290:	4604      	mov	r4, r0
 8003292:	4608      	mov	r0, r1
 8003294:	4611      	mov	r1, r2
 8003296:	2200      	movs	r2, #0
 8003298:	602a      	str	r2, [r5, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	f7fd fc5b 	bl	8000b56 <_write>
 80032a0:	1c43      	adds	r3, r0, #1
 80032a2:	d102      	bne.n	80032aa <_write_r+0x1e>
 80032a4:	682b      	ldr	r3, [r5, #0]
 80032a6:	b103      	cbz	r3, 80032aa <_write_r+0x1e>
 80032a8:	6023      	str	r3, [r4, #0]
 80032aa:	bd38      	pop	{r3, r4, r5, pc}
 80032ac:	200002d0 	.word	0x200002d0

080032b0 <__errno>:
 80032b0:	4b01      	ldr	r3, [pc, #4]	; (80032b8 <__errno+0x8>)
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	2000009c 	.word	0x2000009c

080032bc <__libc_init_array>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	4d0d      	ldr	r5, [pc, #52]	; (80032f4 <__libc_init_array+0x38>)
 80032c0:	4c0d      	ldr	r4, [pc, #52]	; (80032f8 <__libc_init_array+0x3c>)
 80032c2:	1b64      	subs	r4, r4, r5
 80032c4:	10a4      	asrs	r4, r4, #2
 80032c6:	2600      	movs	r6, #0
 80032c8:	42a6      	cmp	r6, r4
 80032ca:	d109      	bne.n	80032e0 <__libc_init_array+0x24>
 80032cc:	4d0b      	ldr	r5, [pc, #44]	; (80032fc <__libc_init_array+0x40>)
 80032ce:	4c0c      	ldr	r4, [pc, #48]	; (8003300 <__libc_init_array+0x44>)
 80032d0:	f000 fdc0 	bl	8003e54 <_init>
 80032d4:	1b64      	subs	r4, r4, r5
 80032d6:	10a4      	asrs	r4, r4, #2
 80032d8:	2600      	movs	r6, #0
 80032da:	42a6      	cmp	r6, r4
 80032dc:	d105      	bne.n	80032ea <__libc_init_array+0x2e>
 80032de:	bd70      	pop	{r4, r5, r6, pc}
 80032e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e4:	4798      	blx	r3
 80032e6:	3601      	adds	r6, #1
 80032e8:	e7ee      	b.n	80032c8 <__libc_init_array+0xc>
 80032ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ee:	4798      	blx	r3
 80032f0:	3601      	adds	r6, #1
 80032f2:	e7f2      	b.n	80032da <__libc_init_array+0x1e>
 80032f4:	08003ee8 	.word	0x08003ee8
 80032f8:	08003ee8 	.word	0x08003ee8
 80032fc:	08003ee8 	.word	0x08003ee8
 8003300:	08003eec 	.word	0x08003eec

08003304 <__retarget_lock_init_recursive>:
 8003304:	4770      	bx	lr

08003306 <__retarget_lock_acquire_recursive>:
 8003306:	4770      	bx	lr

08003308 <__retarget_lock_release_recursive>:
 8003308:	4770      	bx	lr
	...

0800330c <_free_r>:
 800330c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800330e:	2900      	cmp	r1, #0
 8003310:	d044      	beq.n	800339c <_free_r+0x90>
 8003312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003316:	9001      	str	r0, [sp, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	f1a1 0404 	sub.w	r4, r1, #4
 800331e:	bfb8      	it	lt
 8003320:	18e4      	addlt	r4, r4, r3
 8003322:	f000 f8df 	bl	80034e4 <__malloc_lock>
 8003326:	4a1e      	ldr	r2, [pc, #120]	; (80033a0 <_free_r+0x94>)
 8003328:	9801      	ldr	r0, [sp, #4]
 800332a:	6813      	ldr	r3, [r2, #0]
 800332c:	b933      	cbnz	r3, 800333c <_free_r+0x30>
 800332e:	6063      	str	r3, [r4, #4]
 8003330:	6014      	str	r4, [r2, #0]
 8003332:	b003      	add	sp, #12
 8003334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003338:	f000 b8da 	b.w	80034f0 <__malloc_unlock>
 800333c:	42a3      	cmp	r3, r4
 800333e:	d908      	bls.n	8003352 <_free_r+0x46>
 8003340:	6825      	ldr	r5, [r4, #0]
 8003342:	1961      	adds	r1, r4, r5
 8003344:	428b      	cmp	r3, r1
 8003346:	bf01      	itttt	eq
 8003348:	6819      	ldreq	r1, [r3, #0]
 800334a:	685b      	ldreq	r3, [r3, #4]
 800334c:	1949      	addeq	r1, r1, r5
 800334e:	6021      	streq	r1, [r4, #0]
 8003350:	e7ed      	b.n	800332e <_free_r+0x22>
 8003352:	461a      	mov	r2, r3
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	b10b      	cbz	r3, 800335c <_free_r+0x50>
 8003358:	42a3      	cmp	r3, r4
 800335a:	d9fa      	bls.n	8003352 <_free_r+0x46>
 800335c:	6811      	ldr	r1, [r2, #0]
 800335e:	1855      	adds	r5, r2, r1
 8003360:	42a5      	cmp	r5, r4
 8003362:	d10b      	bne.n	800337c <_free_r+0x70>
 8003364:	6824      	ldr	r4, [r4, #0]
 8003366:	4421      	add	r1, r4
 8003368:	1854      	adds	r4, r2, r1
 800336a:	42a3      	cmp	r3, r4
 800336c:	6011      	str	r1, [r2, #0]
 800336e:	d1e0      	bne.n	8003332 <_free_r+0x26>
 8003370:	681c      	ldr	r4, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	6053      	str	r3, [r2, #4]
 8003376:	440c      	add	r4, r1
 8003378:	6014      	str	r4, [r2, #0]
 800337a:	e7da      	b.n	8003332 <_free_r+0x26>
 800337c:	d902      	bls.n	8003384 <_free_r+0x78>
 800337e:	230c      	movs	r3, #12
 8003380:	6003      	str	r3, [r0, #0]
 8003382:	e7d6      	b.n	8003332 <_free_r+0x26>
 8003384:	6825      	ldr	r5, [r4, #0]
 8003386:	1961      	adds	r1, r4, r5
 8003388:	428b      	cmp	r3, r1
 800338a:	bf04      	itt	eq
 800338c:	6819      	ldreq	r1, [r3, #0]
 800338e:	685b      	ldreq	r3, [r3, #4]
 8003390:	6063      	str	r3, [r4, #4]
 8003392:	bf04      	itt	eq
 8003394:	1949      	addeq	r1, r1, r5
 8003396:	6021      	streq	r1, [r4, #0]
 8003398:	6054      	str	r4, [r2, #4]
 800339a:	e7ca      	b.n	8003332 <_free_r+0x26>
 800339c:	b003      	add	sp, #12
 800339e:	bd30      	pop	{r4, r5, pc}
 80033a0:	200002d8 	.word	0x200002d8

080033a4 <sbrk_aligned>:
 80033a4:	b570      	push	{r4, r5, r6, lr}
 80033a6:	4e0e      	ldr	r6, [pc, #56]	; (80033e0 <sbrk_aligned+0x3c>)
 80033a8:	460c      	mov	r4, r1
 80033aa:	6831      	ldr	r1, [r6, #0]
 80033ac:	4605      	mov	r5, r0
 80033ae:	b911      	cbnz	r1, 80033b6 <sbrk_aligned+0x12>
 80033b0:	f000 fcbc 	bl	8003d2c <_sbrk_r>
 80033b4:	6030      	str	r0, [r6, #0]
 80033b6:	4621      	mov	r1, r4
 80033b8:	4628      	mov	r0, r5
 80033ba:	f000 fcb7 	bl	8003d2c <_sbrk_r>
 80033be:	1c43      	adds	r3, r0, #1
 80033c0:	d00a      	beq.n	80033d8 <sbrk_aligned+0x34>
 80033c2:	1cc4      	adds	r4, r0, #3
 80033c4:	f024 0403 	bic.w	r4, r4, #3
 80033c8:	42a0      	cmp	r0, r4
 80033ca:	d007      	beq.n	80033dc <sbrk_aligned+0x38>
 80033cc:	1a21      	subs	r1, r4, r0
 80033ce:	4628      	mov	r0, r5
 80033d0:	f000 fcac 	bl	8003d2c <_sbrk_r>
 80033d4:	3001      	adds	r0, #1
 80033d6:	d101      	bne.n	80033dc <sbrk_aligned+0x38>
 80033d8:	f04f 34ff 	mov.w	r4, #4294967295
 80033dc:	4620      	mov	r0, r4
 80033de:	bd70      	pop	{r4, r5, r6, pc}
 80033e0:	200002dc 	.word	0x200002dc

080033e4 <_malloc_r>:
 80033e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033e8:	1ccd      	adds	r5, r1, #3
 80033ea:	f025 0503 	bic.w	r5, r5, #3
 80033ee:	3508      	adds	r5, #8
 80033f0:	2d0c      	cmp	r5, #12
 80033f2:	bf38      	it	cc
 80033f4:	250c      	movcc	r5, #12
 80033f6:	2d00      	cmp	r5, #0
 80033f8:	4607      	mov	r7, r0
 80033fa:	db01      	blt.n	8003400 <_malloc_r+0x1c>
 80033fc:	42a9      	cmp	r1, r5
 80033fe:	d905      	bls.n	800340c <_malloc_r+0x28>
 8003400:	230c      	movs	r3, #12
 8003402:	603b      	str	r3, [r7, #0]
 8003404:	2600      	movs	r6, #0
 8003406:	4630      	mov	r0, r6
 8003408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800340c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80034e0 <_malloc_r+0xfc>
 8003410:	f000 f868 	bl	80034e4 <__malloc_lock>
 8003414:	f8d8 3000 	ldr.w	r3, [r8]
 8003418:	461c      	mov	r4, r3
 800341a:	bb5c      	cbnz	r4, 8003474 <_malloc_r+0x90>
 800341c:	4629      	mov	r1, r5
 800341e:	4638      	mov	r0, r7
 8003420:	f7ff ffc0 	bl	80033a4 <sbrk_aligned>
 8003424:	1c43      	adds	r3, r0, #1
 8003426:	4604      	mov	r4, r0
 8003428:	d155      	bne.n	80034d6 <_malloc_r+0xf2>
 800342a:	f8d8 4000 	ldr.w	r4, [r8]
 800342e:	4626      	mov	r6, r4
 8003430:	2e00      	cmp	r6, #0
 8003432:	d145      	bne.n	80034c0 <_malloc_r+0xdc>
 8003434:	2c00      	cmp	r4, #0
 8003436:	d048      	beq.n	80034ca <_malloc_r+0xe6>
 8003438:	6823      	ldr	r3, [r4, #0]
 800343a:	4631      	mov	r1, r6
 800343c:	4638      	mov	r0, r7
 800343e:	eb04 0903 	add.w	r9, r4, r3
 8003442:	f000 fc73 	bl	8003d2c <_sbrk_r>
 8003446:	4581      	cmp	r9, r0
 8003448:	d13f      	bne.n	80034ca <_malloc_r+0xe6>
 800344a:	6821      	ldr	r1, [r4, #0]
 800344c:	1a6d      	subs	r5, r5, r1
 800344e:	4629      	mov	r1, r5
 8003450:	4638      	mov	r0, r7
 8003452:	f7ff ffa7 	bl	80033a4 <sbrk_aligned>
 8003456:	3001      	adds	r0, #1
 8003458:	d037      	beq.n	80034ca <_malloc_r+0xe6>
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	442b      	add	r3, r5
 800345e:	6023      	str	r3, [r4, #0]
 8003460:	f8d8 3000 	ldr.w	r3, [r8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d038      	beq.n	80034da <_malloc_r+0xf6>
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	42a2      	cmp	r2, r4
 800346c:	d12b      	bne.n	80034c6 <_malloc_r+0xe2>
 800346e:	2200      	movs	r2, #0
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	e00f      	b.n	8003494 <_malloc_r+0xb0>
 8003474:	6822      	ldr	r2, [r4, #0]
 8003476:	1b52      	subs	r2, r2, r5
 8003478:	d41f      	bmi.n	80034ba <_malloc_r+0xd6>
 800347a:	2a0b      	cmp	r2, #11
 800347c:	d917      	bls.n	80034ae <_malloc_r+0xca>
 800347e:	1961      	adds	r1, r4, r5
 8003480:	42a3      	cmp	r3, r4
 8003482:	6025      	str	r5, [r4, #0]
 8003484:	bf18      	it	ne
 8003486:	6059      	strne	r1, [r3, #4]
 8003488:	6863      	ldr	r3, [r4, #4]
 800348a:	bf08      	it	eq
 800348c:	f8c8 1000 	streq.w	r1, [r8]
 8003490:	5162      	str	r2, [r4, r5]
 8003492:	604b      	str	r3, [r1, #4]
 8003494:	4638      	mov	r0, r7
 8003496:	f104 060b 	add.w	r6, r4, #11
 800349a:	f000 f829 	bl	80034f0 <__malloc_unlock>
 800349e:	f026 0607 	bic.w	r6, r6, #7
 80034a2:	1d23      	adds	r3, r4, #4
 80034a4:	1af2      	subs	r2, r6, r3
 80034a6:	d0ae      	beq.n	8003406 <_malloc_r+0x22>
 80034a8:	1b9b      	subs	r3, r3, r6
 80034aa:	50a3      	str	r3, [r4, r2]
 80034ac:	e7ab      	b.n	8003406 <_malloc_r+0x22>
 80034ae:	42a3      	cmp	r3, r4
 80034b0:	6862      	ldr	r2, [r4, #4]
 80034b2:	d1dd      	bne.n	8003470 <_malloc_r+0x8c>
 80034b4:	f8c8 2000 	str.w	r2, [r8]
 80034b8:	e7ec      	b.n	8003494 <_malloc_r+0xb0>
 80034ba:	4623      	mov	r3, r4
 80034bc:	6864      	ldr	r4, [r4, #4]
 80034be:	e7ac      	b.n	800341a <_malloc_r+0x36>
 80034c0:	4634      	mov	r4, r6
 80034c2:	6876      	ldr	r6, [r6, #4]
 80034c4:	e7b4      	b.n	8003430 <_malloc_r+0x4c>
 80034c6:	4613      	mov	r3, r2
 80034c8:	e7cc      	b.n	8003464 <_malloc_r+0x80>
 80034ca:	230c      	movs	r3, #12
 80034cc:	603b      	str	r3, [r7, #0]
 80034ce:	4638      	mov	r0, r7
 80034d0:	f000 f80e 	bl	80034f0 <__malloc_unlock>
 80034d4:	e797      	b.n	8003406 <_malloc_r+0x22>
 80034d6:	6025      	str	r5, [r4, #0]
 80034d8:	e7dc      	b.n	8003494 <_malloc_r+0xb0>
 80034da:	605b      	str	r3, [r3, #4]
 80034dc:	deff      	udf	#255	; 0xff
 80034de:	bf00      	nop
 80034e0:	200002d8 	.word	0x200002d8

080034e4 <__malloc_lock>:
 80034e4:	4801      	ldr	r0, [pc, #4]	; (80034ec <__malloc_lock+0x8>)
 80034e6:	f7ff bf0e 	b.w	8003306 <__retarget_lock_acquire_recursive>
 80034ea:	bf00      	nop
 80034ec:	200002d4 	.word	0x200002d4

080034f0 <__malloc_unlock>:
 80034f0:	4801      	ldr	r0, [pc, #4]	; (80034f8 <__malloc_unlock+0x8>)
 80034f2:	f7ff bf09 	b.w	8003308 <__retarget_lock_release_recursive>
 80034f6:	bf00      	nop
 80034f8:	200002d4 	.word	0x200002d4

080034fc <__sfputc_r>:
 80034fc:	6893      	ldr	r3, [r2, #8]
 80034fe:	3b01      	subs	r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	b410      	push	{r4}
 8003504:	6093      	str	r3, [r2, #8]
 8003506:	da08      	bge.n	800351a <__sfputc_r+0x1e>
 8003508:	6994      	ldr	r4, [r2, #24]
 800350a:	42a3      	cmp	r3, r4
 800350c:	db01      	blt.n	8003512 <__sfputc_r+0x16>
 800350e:	290a      	cmp	r1, #10
 8003510:	d103      	bne.n	800351a <__sfputc_r+0x1e>
 8003512:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003516:	f000 bb73 	b.w	8003c00 <__swbuf_r>
 800351a:	6813      	ldr	r3, [r2, #0]
 800351c:	1c58      	adds	r0, r3, #1
 800351e:	6010      	str	r0, [r2, #0]
 8003520:	7019      	strb	r1, [r3, #0]
 8003522:	4608      	mov	r0, r1
 8003524:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003528:	4770      	bx	lr

0800352a <__sfputs_r>:
 800352a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352c:	4606      	mov	r6, r0
 800352e:	460f      	mov	r7, r1
 8003530:	4614      	mov	r4, r2
 8003532:	18d5      	adds	r5, r2, r3
 8003534:	42ac      	cmp	r4, r5
 8003536:	d101      	bne.n	800353c <__sfputs_r+0x12>
 8003538:	2000      	movs	r0, #0
 800353a:	e007      	b.n	800354c <__sfputs_r+0x22>
 800353c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003540:	463a      	mov	r2, r7
 8003542:	4630      	mov	r0, r6
 8003544:	f7ff ffda 	bl	80034fc <__sfputc_r>
 8003548:	1c43      	adds	r3, r0, #1
 800354a:	d1f3      	bne.n	8003534 <__sfputs_r+0xa>
 800354c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003550 <_vfiprintf_r>:
 8003550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003554:	460d      	mov	r5, r1
 8003556:	b09d      	sub	sp, #116	; 0x74
 8003558:	4614      	mov	r4, r2
 800355a:	4698      	mov	r8, r3
 800355c:	4606      	mov	r6, r0
 800355e:	b118      	cbz	r0, 8003568 <_vfiprintf_r+0x18>
 8003560:	6a03      	ldr	r3, [r0, #32]
 8003562:	b90b      	cbnz	r3, 8003568 <_vfiprintf_r+0x18>
 8003564:	f7ff fdca 	bl	80030fc <__sinit>
 8003568:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800356a:	07d9      	lsls	r1, r3, #31
 800356c:	d405      	bmi.n	800357a <_vfiprintf_r+0x2a>
 800356e:	89ab      	ldrh	r3, [r5, #12]
 8003570:	059a      	lsls	r2, r3, #22
 8003572:	d402      	bmi.n	800357a <_vfiprintf_r+0x2a>
 8003574:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003576:	f7ff fec6 	bl	8003306 <__retarget_lock_acquire_recursive>
 800357a:	89ab      	ldrh	r3, [r5, #12]
 800357c:	071b      	lsls	r3, r3, #28
 800357e:	d501      	bpl.n	8003584 <_vfiprintf_r+0x34>
 8003580:	692b      	ldr	r3, [r5, #16]
 8003582:	b99b      	cbnz	r3, 80035ac <_vfiprintf_r+0x5c>
 8003584:	4629      	mov	r1, r5
 8003586:	4630      	mov	r0, r6
 8003588:	f000 fb78 	bl	8003c7c <__swsetup_r>
 800358c:	b170      	cbz	r0, 80035ac <_vfiprintf_r+0x5c>
 800358e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003590:	07dc      	lsls	r4, r3, #31
 8003592:	d504      	bpl.n	800359e <_vfiprintf_r+0x4e>
 8003594:	f04f 30ff 	mov.w	r0, #4294967295
 8003598:	b01d      	add	sp, #116	; 0x74
 800359a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800359e:	89ab      	ldrh	r3, [r5, #12]
 80035a0:	0598      	lsls	r0, r3, #22
 80035a2:	d4f7      	bmi.n	8003594 <_vfiprintf_r+0x44>
 80035a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035a6:	f7ff feaf 	bl	8003308 <__retarget_lock_release_recursive>
 80035aa:	e7f3      	b.n	8003594 <_vfiprintf_r+0x44>
 80035ac:	2300      	movs	r3, #0
 80035ae:	9309      	str	r3, [sp, #36]	; 0x24
 80035b0:	2320      	movs	r3, #32
 80035b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80035ba:	2330      	movs	r3, #48	; 0x30
 80035bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003770 <_vfiprintf_r+0x220>
 80035c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035c4:	f04f 0901 	mov.w	r9, #1
 80035c8:	4623      	mov	r3, r4
 80035ca:	469a      	mov	sl, r3
 80035cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035d0:	b10a      	cbz	r2, 80035d6 <_vfiprintf_r+0x86>
 80035d2:	2a25      	cmp	r2, #37	; 0x25
 80035d4:	d1f9      	bne.n	80035ca <_vfiprintf_r+0x7a>
 80035d6:	ebba 0b04 	subs.w	fp, sl, r4
 80035da:	d00b      	beq.n	80035f4 <_vfiprintf_r+0xa4>
 80035dc:	465b      	mov	r3, fp
 80035de:	4622      	mov	r2, r4
 80035e0:	4629      	mov	r1, r5
 80035e2:	4630      	mov	r0, r6
 80035e4:	f7ff ffa1 	bl	800352a <__sfputs_r>
 80035e8:	3001      	adds	r0, #1
 80035ea:	f000 80a9 	beq.w	8003740 <_vfiprintf_r+0x1f0>
 80035ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035f0:	445a      	add	r2, fp
 80035f2:	9209      	str	r2, [sp, #36]	; 0x24
 80035f4:	f89a 3000 	ldrb.w	r3, [sl]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 80a1 	beq.w	8003740 <_vfiprintf_r+0x1f0>
 80035fe:	2300      	movs	r3, #0
 8003600:	f04f 32ff 	mov.w	r2, #4294967295
 8003604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003608:	f10a 0a01 	add.w	sl, sl, #1
 800360c:	9304      	str	r3, [sp, #16]
 800360e:	9307      	str	r3, [sp, #28]
 8003610:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003614:	931a      	str	r3, [sp, #104]	; 0x68
 8003616:	4654      	mov	r4, sl
 8003618:	2205      	movs	r2, #5
 800361a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800361e:	4854      	ldr	r0, [pc, #336]	; (8003770 <_vfiprintf_r+0x220>)
 8003620:	f7fc fdfe 	bl	8000220 <memchr>
 8003624:	9a04      	ldr	r2, [sp, #16]
 8003626:	b9d8      	cbnz	r0, 8003660 <_vfiprintf_r+0x110>
 8003628:	06d1      	lsls	r1, r2, #27
 800362a:	bf44      	itt	mi
 800362c:	2320      	movmi	r3, #32
 800362e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003632:	0713      	lsls	r3, r2, #28
 8003634:	bf44      	itt	mi
 8003636:	232b      	movmi	r3, #43	; 0x2b
 8003638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800363c:	f89a 3000 	ldrb.w	r3, [sl]
 8003640:	2b2a      	cmp	r3, #42	; 0x2a
 8003642:	d015      	beq.n	8003670 <_vfiprintf_r+0x120>
 8003644:	9a07      	ldr	r2, [sp, #28]
 8003646:	4654      	mov	r4, sl
 8003648:	2000      	movs	r0, #0
 800364a:	f04f 0c0a 	mov.w	ip, #10
 800364e:	4621      	mov	r1, r4
 8003650:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003654:	3b30      	subs	r3, #48	; 0x30
 8003656:	2b09      	cmp	r3, #9
 8003658:	d94d      	bls.n	80036f6 <_vfiprintf_r+0x1a6>
 800365a:	b1b0      	cbz	r0, 800368a <_vfiprintf_r+0x13a>
 800365c:	9207      	str	r2, [sp, #28]
 800365e:	e014      	b.n	800368a <_vfiprintf_r+0x13a>
 8003660:	eba0 0308 	sub.w	r3, r0, r8
 8003664:	fa09 f303 	lsl.w	r3, r9, r3
 8003668:	4313      	orrs	r3, r2
 800366a:	9304      	str	r3, [sp, #16]
 800366c:	46a2      	mov	sl, r4
 800366e:	e7d2      	b.n	8003616 <_vfiprintf_r+0xc6>
 8003670:	9b03      	ldr	r3, [sp, #12]
 8003672:	1d19      	adds	r1, r3, #4
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	9103      	str	r1, [sp, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	bfbb      	ittet	lt
 800367c:	425b      	neglt	r3, r3
 800367e:	f042 0202 	orrlt.w	r2, r2, #2
 8003682:	9307      	strge	r3, [sp, #28]
 8003684:	9307      	strlt	r3, [sp, #28]
 8003686:	bfb8      	it	lt
 8003688:	9204      	strlt	r2, [sp, #16]
 800368a:	7823      	ldrb	r3, [r4, #0]
 800368c:	2b2e      	cmp	r3, #46	; 0x2e
 800368e:	d10c      	bne.n	80036aa <_vfiprintf_r+0x15a>
 8003690:	7863      	ldrb	r3, [r4, #1]
 8003692:	2b2a      	cmp	r3, #42	; 0x2a
 8003694:	d134      	bne.n	8003700 <_vfiprintf_r+0x1b0>
 8003696:	9b03      	ldr	r3, [sp, #12]
 8003698:	1d1a      	adds	r2, r3, #4
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	9203      	str	r2, [sp, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	bfb8      	it	lt
 80036a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80036a6:	3402      	adds	r4, #2
 80036a8:	9305      	str	r3, [sp, #20]
 80036aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003780 <_vfiprintf_r+0x230>
 80036ae:	7821      	ldrb	r1, [r4, #0]
 80036b0:	2203      	movs	r2, #3
 80036b2:	4650      	mov	r0, sl
 80036b4:	f7fc fdb4 	bl	8000220 <memchr>
 80036b8:	b138      	cbz	r0, 80036ca <_vfiprintf_r+0x17a>
 80036ba:	9b04      	ldr	r3, [sp, #16]
 80036bc:	eba0 000a 	sub.w	r0, r0, sl
 80036c0:	2240      	movs	r2, #64	; 0x40
 80036c2:	4082      	lsls	r2, r0
 80036c4:	4313      	orrs	r3, r2
 80036c6:	3401      	adds	r4, #1
 80036c8:	9304      	str	r3, [sp, #16]
 80036ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036ce:	4829      	ldr	r0, [pc, #164]	; (8003774 <_vfiprintf_r+0x224>)
 80036d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036d4:	2206      	movs	r2, #6
 80036d6:	f7fc fda3 	bl	8000220 <memchr>
 80036da:	2800      	cmp	r0, #0
 80036dc:	d03f      	beq.n	800375e <_vfiprintf_r+0x20e>
 80036de:	4b26      	ldr	r3, [pc, #152]	; (8003778 <_vfiprintf_r+0x228>)
 80036e0:	bb1b      	cbnz	r3, 800372a <_vfiprintf_r+0x1da>
 80036e2:	9b03      	ldr	r3, [sp, #12]
 80036e4:	3307      	adds	r3, #7
 80036e6:	f023 0307 	bic.w	r3, r3, #7
 80036ea:	3308      	adds	r3, #8
 80036ec:	9303      	str	r3, [sp, #12]
 80036ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036f0:	443b      	add	r3, r7
 80036f2:	9309      	str	r3, [sp, #36]	; 0x24
 80036f4:	e768      	b.n	80035c8 <_vfiprintf_r+0x78>
 80036f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80036fa:	460c      	mov	r4, r1
 80036fc:	2001      	movs	r0, #1
 80036fe:	e7a6      	b.n	800364e <_vfiprintf_r+0xfe>
 8003700:	2300      	movs	r3, #0
 8003702:	3401      	adds	r4, #1
 8003704:	9305      	str	r3, [sp, #20]
 8003706:	4619      	mov	r1, r3
 8003708:	f04f 0c0a 	mov.w	ip, #10
 800370c:	4620      	mov	r0, r4
 800370e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003712:	3a30      	subs	r2, #48	; 0x30
 8003714:	2a09      	cmp	r2, #9
 8003716:	d903      	bls.n	8003720 <_vfiprintf_r+0x1d0>
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0c6      	beq.n	80036aa <_vfiprintf_r+0x15a>
 800371c:	9105      	str	r1, [sp, #20]
 800371e:	e7c4      	b.n	80036aa <_vfiprintf_r+0x15a>
 8003720:	fb0c 2101 	mla	r1, ip, r1, r2
 8003724:	4604      	mov	r4, r0
 8003726:	2301      	movs	r3, #1
 8003728:	e7f0      	b.n	800370c <_vfiprintf_r+0x1bc>
 800372a:	ab03      	add	r3, sp, #12
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	462a      	mov	r2, r5
 8003730:	4b12      	ldr	r3, [pc, #72]	; (800377c <_vfiprintf_r+0x22c>)
 8003732:	a904      	add	r1, sp, #16
 8003734:	4630      	mov	r0, r6
 8003736:	f3af 8000 	nop.w
 800373a:	4607      	mov	r7, r0
 800373c:	1c78      	adds	r0, r7, #1
 800373e:	d1d6      	bne.n	80036ee <_vfiprintf_r+0x19e>
 8003740:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003742:	07d9      	lsls	r1, r3, #31
 8003744:	d405      	bmi.n	8003752 <_vfiprintf_r+0x202>
 8003746:	89ab      	ldrh	r3, [r5, #12]
 8003748:	059a      	lsls	r2, r3, #22
 800374a:	d402      	bmi.n	8003752 <_vfiprintf_r+0x202>
 800374c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800374e:	f7ff fddb 	bl	8003308 <__retarget_lock_release_recursive>
 8003752:	89ab      	ldrh	r3, [r5, #12]
 8003754:	065b      	lsls	r3, r3, #25
 8003756:	f53f af1d 	bmi.w	8003594 <_vfiprintf_r+0x44>
 800375a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800375c:	e71c      	b.n	8003598 <_vfiprintf_r+0x48>
 800375e:	ab03      	add	r3, sp, #12
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	462a      	mov	r2, r5
 8003764:	4b05      	ldr	r3, [pc, #20]	; (800377c <_vfiprintf_r+0x22c>)
 8003766:	a904      	add	r1, sp, #16
 8003768:	4630      	mov	r0, r6
 800376a:	f000 f879 	bl	8003860 <_printf_i>
 800376e:	e7e4      	b.n	800373a <_vfiprintf_r+0x1ea>
 8003770:	08003eac 	.word	0x08003eac
 8003774:	08003eb6 	.word	0x08003eb6
 8003778:	00000000 	.word	0x00000000
 800377c:	0800352b 	.word	0x0800352b
 8003780:	08003eb2 	.word	0x08003eb2

08003784 <_printf_common>:
 8003784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003788:	4616      	mov	r6, r2
 800378a:	4699      	mov	r9, r3
 800378c:	688a      	ldr	r2, [r1, #8]
 800378e:	690b      	ldr	r3, [r1, #16]
 8003790:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003794:	4293      	cmp	r3, r2
 8003796:	bfb8      	it	lt
 8003798:	4613      	movlt	r3, r2
 800379a:	6033      	str	r3, [r6, #0]
 800379c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037a0:	4607      	mov	r7, r0
 80037a2:	460c      	mov	r4, r1
 80037a4:	b10a      	cbz	r2, 80037aa <_printf_common+0x26>
 80037a6:	3301      	adds	r3, #1
 80037a8:	6033      	str	r3, [r6, #0]
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	0699      	lsls	r1, r3, #26
 80037ae:	bf42      	ittt	mi
 80037b0:	6833      	ldrmi	r3, [r6, #0]
 80037b2:	3302      	addmi	r3, #2
 80037b4:	6033      	strmi	r3, [r6, #0]
 80037b6:	6825      	ldr	r5, [r4, #0]
 80037b8:	f015 0506 	ands.w	r5, r5, #6
 80037bc:	d106      	bne.n	80037cc <_printf_common+0x48>
 80037be:	f104 0a19 	add.w	sl, r4, #25
 80037c2:	68e3      	ldr	r3, [r4, #12]
 80037c4:	6832      	ldr	r2, [r6, #0]
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	42ab      	cmp	r3, r5
 80037ca:	dc26      	bgt.n	800381a <_printf_common+0x96>
 80037cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037d0:	1e13      	subs	r3, r2, #0
 80037d2:	6822      	ldr	r2, [r4, #0]
 80037d4:	bf18      	it	ne
 80037d6:	2301      	movne	r3, #1
 80037d8:	0692      	lsls	r2, r2, #26
 80037da:	d42b      	bmi.n	8003834 <_printf_common+0xb0>
 80037dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037e0:	4649      	mov	r1, r9
 80037e2:	4638      	mov	r0, r7
 80037e4:	47c0      	blx	r8
 80037e6:	3001      	adds	r0, #1
 80037e8:	d01e      	beq.n	8003828 <_printf_common+0xa4>
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	6922      	ldr	r2, [r4, #16]
 80037ee:	f003 0306 	and.w	r3, r3, #6
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	bf02      	ittt	eq
 80037f6:	68e5      	ldreq	r5, [r4, #12]
 80037f8:	6833      	ldreq	r3, [r6, #0]
 80037fa:	1aed      	subeq	r5, r5, r3
 80037fc:	68a3      	ldr	r3, [r4, #8]
 80037fe:	bf0c      	ite	eq
 8003800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003804:	2500      	movne	r5, #0
 8003806:	4293      	cmp	r3, r2
 8003808:	bfc4      	itt	gt
 800380a:	1a9b      	subgt	r3, r3, r2
 800380c:	18ed      	addgt	r5, r5, r3
 800380e:	2600      	movs	r6, #0
 8003810:	341a      	adds	r4, #26
 8003812:	42b5      	cmp	r5, r6
 8003814:	d11a      	bne.n	800384c <_printf_common+0xc8>
 8003816:	2000      	movs	r0, #0
 8003818:	e008      	b.n	800382c <_printf_common+0xa8>
 800381a:	2301      	movs	r3, #1
 800381c:	4652      	mov	r2, sl
 800381e:	4649      	mov	r1, r9
 8003820:	4638      	mov	r0, r7
 8003822:	47c0      	blx	r8
 8003824:	3001      	adds	r0, #1
 8003826:	d103      	bne.n	8003830 <_printf_common+0xac>
 8003828:	f04f 30ff 	mov.w	r0, #4294967295
 800382c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003830:	3501      	adds	r5, #1
 8003832:	e7c6      	b.n	80037c2 <_printf_common+0x3e>
 8003834:	18e1      	adds	r1, r4, r3
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	2030      	movs	r0, #48	; 0x30
 800383a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800383e:	4422      	add	r2, r4
 8003840:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003844:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003848:	3302      	adds	r3, #2
 800384a:	e7c7      	b.n	80037dc <_printf_common+0x58>
 800384c:	2301      	movs	r3, #1
 800384e:	4622      	mov	r2, r4
 8003850:	4649      	mov	r1, r9
 8003852:	4638      	mov	r0, r7
 8003854:	47c0      	blx	r8
 8003856:	3001      	adds	r0, #1
 8003858:	d0e6      	beq.n	8003828 <_printf_common+0xa4>
 800385a:	3601      	adds	r6, #1
 800385c:	e7d9      	b.n	8003812 <_printf_common+0x8e>
	...

08003860 <_printf_i>:
 8003860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003864:	7e0f      	ldrb	r7, [r1, #24]
 8003866:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003868:	2f78      	cmp	r7, #120	; 0x78
 800386a:	4691      	mov	r9, r2
 800386c:	4680      	mov	r8, r0
 800386e:	460c      	mov	r4, r1
 8003870:	469a      	mov	sl, r3
 8003872:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003876:	d807      	bhi.n	8003888 <_printf_i+0x28>
 8003878:	2f62      	cmp	r7, #98	; 0x62
 800387a:	d80a      	bhi.n	8003892 <_printf_i+0x32>
 800387c:	2f00      	cmp	r7, #0
 800387e:	f000 80d4 	beq.w	8003a2a <_printf_i+0x1ca>
 8003882:	2f58      	cmp	r7, #88	; 0x58
 8003884:	f000 80c0 	beq.w	8003a08 <_printf_i+0x1a8>
 8003888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800388c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003890:	e03a      	b.n	8003908 <_printf_i+0xa8>
 8003892:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003896:	2b15      	cmp	r3, #21
 8003898:	d8f6      	bhi.n	8003888 <_printf_i+0x28>
 800389a:	a101      	add	r1, pc, #4	; (adr r1, 80038a0 <_printf_i+0x40>)
 800389c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038a0:	080038f9 	.word	0x080038f9
 80038a4:	0800390d 	.word	0x0800390d
 80038a8:	08003889 	.word	0x08003889
 80038ac:	08003889 	.word	0x08003889
 80038b0:	08003889 	.word	0x08003889
 80038b4:	08003889 	.word	0x08003889
 80038b8:	0800390d 	.word	0x0800390d
 80038bc:	08003889 	.word	0x08003889
 80038c0:	08003889 	.word	0x08003889
 80038c4:	08003889 	.word	0x08003889
 80038c8:	08003889 	.word	0x08003889
 80038cc:	08003a11 	.word	0x08003a11
 80038d0:	08003939 	.word	0x08003939
 80038d4:	080039cb 	.word	0x080039cb
 80038d8:	08003889 	.word	0x08003889
 80038dc:	08003889 	.word	0x08003889
 80038e0:	08003a33 	.word	0x08003a33
 80038e4:	08003889 	.word	0x08003889
 80038e8:	08003939 	.word	0x08003939
 80038ec:	08003889 	.word	0x08003889
 80038f0:	08003889 	.word	0x08003889
 80038f4:	080039d3 	.word	0x080039d3
 80038f8:	682b      	ldr	r3, [r5, #0]
 80038fa:	1d1a      	adds	r2, r3, #4
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	602a      	str	r2, [r5, #0]
 8003900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003904:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003908:	2301      	movs	r3, #1
 800390a:	e09f      	b.n	8003a4c <_printf_i+0x1ec>
 800390c:	6820      	ldr	r0, [r4, #0]
 800390e:	682b      	ldr	r3, [r5, #0]
 8003910:	0607      	lsls	r7, r0, #24
 8003912:	f103 0104 	add.w	r1, r3, #4
 8003916:	6029      	str	r1, [r5, #0]
 8003918:	d501      	bpl.n	800391e <_printf_i+0xbe>
 800391a:	681e      	ldr	r6, [r3, #0]
 800391c:	e003      	b.n	8003926 <_printf_i+0xc6>
 800391e:	0646      	lsls	r6, r0, #25
 8003920:	d5fb      	bpl.n	800391a <_printf_i+0xba>
 8003922:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003926:	2e00      	cmp	r6, #0
 8003928:	da03      	bge.n	8003932 <_printf_i+0xd2>
 800392a:	232d      	movs	r3, #45	; 0x2d
 800392c:	4276      	negs	r6, r6
 800392e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003932:	485a      	ldr	r0, [pc, #360]	; (8003a9c <_printf_i+0x23c>)
 8003934:	230a      	movs	r3, #10
 8003936:	e012      	b.n	800395e <_printf_i+0xfe>
 8003938:	682b      	ldr	r3, [r5, #0]
 800393a:	6820      	ldr	r0, [r4, #0]
 800393c:	1d19      	adds	r1, r3, #4
 800393e:	6029      	str	r1, [r5, #0]
 8003940:	0605      	lsls	r5, r0, #24
 8003942:	d501      	bpl.n	8003948 <_printf_i+0xe8>
 8003944:	681e      	ldr	r6, [r3, #0]
 8003946:	e002      	b.n	800394e <_printf_i+0xee>
 8003948:	0641      	lsls	r1, r0, #25
 800394a:	d5fb      	bpl.n	8003944 <_printf_i+0xe4>
 800394c:	881e      	ldrh	r6, [r3, #0]
 800394e:	4853      	ldr	r0, [pc, #332]	; (8003a9c <_printf_i+0x23c>)
 8003950:	2f6f      	cmp	r7, #111	; 0x6f
 8003952:	bf0c      	ite	eq
 8003954:	2308      	moveq	r3, #8
 8003956:	230a      	movne	r3, #10
 8003958:	2100      	movs	r1, #0
 800395a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800395e:	6865      	ldr	r5, [r4, #4]
 8003960:	60a5      	str	r5, [r4, #8]
 8003962:	2d00      	cmp	r5, #0
 8003964:	bfa2      	ittt	ge
 8003966:	6821      	ldrge	r1, [r4, #0]
 8003968:	f021 0104 	bicge.w	r1, r1, #4
 800396c:	6021      	strge	r1, [r4, #0]
 800396e:	b90e      	cbnz	r6, 8003974 <_printf_i+0x114>
 8003970:	2d00      	cmp	r5, #0
 8003972:	d04b      	beq.n	8003a0c <_printf_i+0x1ac>
 8003974:	4615      	mov	r5, r2
 8003976:	fbb6 f1f3 	udiv	r1, r6, r3
 800397a:	fb03 6711 	mls	r7, r3, r1, r6
 800397e:	5dc7      	ldrb	r7, [r0, r7]
 8003980:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003984:	4637      	mov	r7, r6
 8003986:	42bb      	cmp	r3, r7
 8003988:	460e      	mov	r6, r1
 800398a:	d9f4      	bls.n	8003976 <_printf_i+0x116>
 800398c:	2b08      	cmp	r3, #8
 800398e:	d10b      	bne.n	80039a8 <_printf_i+0x148>
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	07de      	lsls	r6, r3, #31
 8003994:	d508      	bpl.n	80039a8 <_printf_i+0x148>
 8003996:	6923      	ldr	r3, [r4, #16]
 8003998:	6861      	ldr	r1, [r4, #4]
 800399a:	4299      	cmp	r1, r3
 800399c:	bfde      	ittt	le
 800399e:	2330      	movle	r3, #48	; 0x30
 80039a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039a8:	1b52      	subs	r2, r2, r5
 80039aa:	6122      	str	r2, [r4, #16]
 80039ac:	f8cd a000 	str.w	sl, [sp]
 80039b0:	464b      	mov	r3, r9
 80039b2:	aa03      	add	r2, sp, #12
 80039b4:	4621      	mov	r1, r4
 80039b6:	4640      	mov	r0, r8
 80039b8:	f7ff fee4 	bl	8003784 <_printf_common>
 80039bc:	3001      	adds	r0, #1
 80039be:	d14a      	bne.n	8003a56 <_printf_i+0x1f6>
 80039c0:	f04f 30ff 	mov.w	r0, #4294967295
 80039c4:	b004      	add	sp, #16
 80039c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	f043 0320 	orr.w	r3, r3, #32
 80039d0:	6023      	str	r3, [r4, #0]
 80039d2:	4833      	ldr	r0, [pc, #204]	; (8003aa0 <_printf_i+0x240>)
 80039d4:	2778      	movs	r7, #120	; 0x78
 80039d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80039da:	6823      	ldr	r3, [r4, #0]
 80039dc:	6829      	ldr	r1, [r5, #0]
 80039de:	061f      	lsls	r7, r3, #24
 80039e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80039e4:	d402      	bmi.n	80039ec <_printf_i+0x18c>
 80039e6:	065f      	lsls	r7, r3, #25
 80039e8:	bf48      	it	mi
 80039ea:	b2b6      	uxthmi	r6, r6
 80039ec:	07df      	lsls	r7, r3, #31
 80039ee:	bf48      	it	mi
 80039f0:	f043 0320 	orrmi.w	r3, r3, #32
 80039f4:	6029      	str	r1, [r5, #0]
 80039f6:	bf48      	it	mi
 80039f8:	6023      	strmi	r3, [r4, #0]
 80039fa:	b91e      	cbnz	r6, 8003a04 <_printf_i+0x1a4>
 80039fc:	6823      	ldr	r3, [r4, #0]
 80039fe:	f023 0320 	bic.w	r3, r3, #32
 8003a02:	6023      	str	r3, [r4, #0]
 8003a04:	2310      	movs	r3, #16
 8003a06:	e7a7      	b.n	8003958 <_printf_i+0xf8>
 8003a08:	4824      	ldr	r0, [pc, #144]	; (8003a9c <_printf_i+0x23c>)
 8003a0a:	e7e4      	b.n	80039d6 <_printf_i+0x176>
 8003a0c:	4615      	mov	r5, r2
 8003a0e:	e7bd      	b.n	800398c <_printf_i+0x12c>
 8003a10:	682b      	ldr	r3, [r5, #0]
 8003a12:	6826      	ldr	r6, [r4, #0]
 8003a14:	6961      	ldr	r1, [r4, #20]
 8003a16:	1d18      	adds	r0, r3, #4
 8003a18:	6028      	str	r0, [r5, #0]
 8003a1a:	0635      	lsls	r5, r6, #24
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	d501      	bpl.n	8003a24 <_printf_i+0x1c4>
 8003a20:	6019      	str	r1, [r3, #0]
 8003a22:	e002      	b.n	8003a2a <_printf_i+0x1ca>
 8003a24:	0670      	lsls	r0, r6, #25
 8003a26:	d5fb      	bpl.n	8003a20 <_printf_i+0x1c0>
 8003a28:	8019      	strh	r1, [r3, #0]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	6123      	str	r3, [r4, #16]
 8003a2e:	4615      	mov	r5, r2
 8003a30:	e7bc      	b.n	80039ac <_printf_i+0x14c>
 8003a32:	682b      	ldr	r3, [r5, #0]
 8003a34:	1d1a      	adds	r2, r3, #4
 8003a36:	602a      	str	r2, [r5, #0]
 8003a38:	681d      	ldr	r5, [r3, #0]
 8003a3a:	6862      	ldr	r2, [r4, #4]
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	4628      	mov	r0, r5
 8003a40:	f7fc fbee 	bl	8000220 <memchr>
 8003a44:	b108      	cbz	r0, 8003a4a <_printf_i+0x1ea>
 8003a46:	1b40      	subs	r0, r0, r5
 8003a48:	6060      	str	r0, [r4, #4]
 8003a4a:	6863      	ldr	r3, [r4, #4]
 8003a4c:	6123      	str	r3, [r4, #16]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a54:	e7aa      	b.n	80039ac <_printf_i+0x14c>
 8003a56:	6923      	ldr	r3, [r4, #16]
 8003a58:	462a      	mov	r2, r5
 8003a5a:	4649      	mov	r1, r9
 8003a5c:	4640      	mov	r0, r8
 8003a5e:	47d0      	blx	sl
 8003a60:	3001      	adds	r0, #1
 8003a62:	d0ad      	beq.n	80039c0 <_printf_i+0x160>
 8003a64:	6823      	ldr	r3, [r4, #0]
 8003a66:	079b      	lsls	r3, r3, #30
 8003a68:	d413      	bmi.n	8003a92 <_printf_i+0x232>
 8003a6a:	68e0      	ldr	r0, [r4, #12]
 8003a6c:	9b03      	ldr	r3, [sp, #12]
 8003a6e:	4298      	cmp	r0, r3
 8003a70:	bfb8      	it	lt
 8003a72:	4618      	movlt	r0, r3
 8003a74:	e7a6      	b.n	80039c4 <_printf_i+0x164>
 8003a76:	2301      	movs	r3, #1
 8003a78:	4632      	mov	r2, r6
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	4640      	mov	r0, r8
 8003a7e:	47d0      	blx	sl
 8003a80:	3001      	adds	r0, #1
 8003a82:	d09d      	beq.n	80039c0 <_printf_i+0x160>
 8003a84:	3501      	adds	r5, #1
 8003a86:	68e3      	ldr	r3, [r4, #12]
 8003a88:	9903      	ldr	r1, [sp, #12]
 8003a8a:	1a5b      	subs	r3, r3, r1
 8003a8c:	42ab      	cmp	r3, r5
 8003a8e:	dcf2      	bgt.n	8003a76 <_printf_i+0x216>
 8003a90:	e7eb      	b.n	8003a6a <_printf_i+0x20a>
 8003a92:	2500      	movs	r5, #0
 8003a94:	f104 0619 	add.w	r6, r4, #25
 8003a98:	e7f5      	b.n	8003a86 <_printf_i+0x226>
 8003a9a:	bf00      	nop
 8003a9c:	08003ebd 	.word	0x08003ebd
 8003aa0:	08003ece 	.word	0x08003ece

08003aa4 <__sflush_r>:
 8003aa4:	898a      	ldrh	r2, [r1, #12]
 8003aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aaa:	4605      	mov	r5, r0
 8003aac:	0710      	lsls	r0, r2, #28
 8003aae:	460c      	mov	r4, r1
 8003ab0:	d458      	bmi.n	8003b64 <__sflush_r+0xc0>
 8003ab2:	684b      	ldr	r3, [r1, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	dc05      	bgt.n	8003ac4 <__sflush_r+0x20>
 8003ab8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	dc02      	bgt.n	8003ac4 <__sflush_r+0x20>
 8003abe:	2000      	movs	r0, #0
 8003ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ac4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ac6:	2e00      	cmp	r6, #0
 8003ac8:	d0f9      	beq.n	8003abe <__sflush_r+0x1a>
 8003aca:	2300      	movs	r3, #0
 8003acc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ad0:	682f      	ldr	r7, [r5, #0]
 8003ad2:	6a21      	ldr	r1, [r4, #32]
 8003ad4:	602b      	str	r3, [r5, #0]
 8003ad6:	d032      	beq.n	8003b3e <__sflush_r+0x9a>
 8003ad8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ada:	89a3      	ldrh	r3, [r4, #12]
 8003adc:	075a      	lsls	r2, r3, #29
 8003ade:	d505      	bpl.n	8003aec <__sflush_r+0x48>
 8003ae0:	6863      	ldr	r3, [r4, #4]
 8003ae2:	1ac0      	subs	r0, r0, r3
 8003ae4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ae6:	b10b      	cbz	r3, 8003aec <__sflush_r+0x48>
 8003ae8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003aea:	1ac0      	subs	r0, r0, r3
 8003aec:	2300      	movs	r3, #0
 8003aee:	4602      	mov	r2, r0
 8003af0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003af2:	6a21      	ldr	r1, [r4, #32]
 8003af4:	4628      	mov	r0, r5
 8003af6:	47b0      	blx	r6
 8003af8:	1c43      	adds	r3, r0, #1
 8003afa:	89a3      	ldrh	r3, [r4, #12]
 8003afc:	d106      	bne.n	8003b0c <__sflush_r+0x68>
 8003afe:	6829      	ldr	r1, [r5, #0]
 8003b00:	291d      	cmp	r1, #29
 8003b02:	d82b      	bhi.n	8003b5c <__sflush_r+0xb8>
 8003b04:	4a29      	ldr	r2, [pc, #164]	; (8003bac <__sflush_r+0x108>)
 8003b06:	410a      	asrs	r2, r1
 8003b08:	07d6      	lsls	r6, r2, #31
 8003b0a:	d427      	bmi.n	8003b5c <__sflush_r+0xb8>
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	6062      	str	r2, [r4, #4]
 8003b10:	04d9      	lsls	r1, r3, #19
 8003b12:	6922      	ldr	r2, [r4, #16]
 8003b14:	6022      	str	r2, [r4, #0]
 8003b16:	d504      	bpl.n	8003b22 <__sflush_r+0x7e>
 8003b18:	1c42      	adds	r2, r0, #1
 8003b1a:	d101      	bne.n	8003b20 <__sflush_r+0x7c>
 8003b1c:	682b      	ldr	r3, [r5, #0]
 8003b1e:	b903      	cbnz	r3, 8003b22 <__sflush_r+0x7e>
 8003b20:	6560      	str	r0, [r4, #84]	; 0x54
 8003b22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b24:	602f      	str	r7, [r5, #0]
 8003b26:	2900      	cmp	r1, #0
 8003b28:	d0c9      	beq.n	8003abe <__sflush_r+0x1a>
 8003b2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b2e:	4299      	cmp	r1, r3
 8003b30:	d002      	beq.n	8003b38 <__sflush_r+0x94>
 8003b32:	4628      	mov	r0, r5
 8003b34:	f7ff fbea 	bl	800330c <_free_r>
 8003b38:	2000      	movs	r0, #0
 8003b3a:	6360      	str	r0, [r4, #52]	; 0x34
 8003b3c:	e7c0      	b.n	8003ac0 <__sflush_r+0x1c>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	4628      	mov	r0, r5
 8003b42:	47b0      	blx	r6
 8003b44:	1c41      	adds	r1, r0, #1
 8003b46:	d1c8      	bne.n	8003ada <__sflush_r+0x36>
 8003b48:	682b      	ldr	r3, [r5, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0c5      	beq.n	8003ada <__sflush_r+0x36>
 8003b4e:	2b1d      	cmp	r3, #29
 8003b50:	d001      	beq.n	8003b56 <__sflush_r+0xb2>
 8003b52:	2b16      	cmp	r3, #22
 8003b54:	d101      	bne.n	8003b5a <__sflush_r+0xb6>
 8003b56:	602f      	str	r7, [r5, #0]
 8003b58:	e7b1      	b.n	8003abe <__sflush_r+0x1a>
 8003b5a:	89a3      	ldrh	r3, [r4, #12]
 8003b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b60:	81a3      	strh	r3, [r4, #12]
 8003b62:	e7ad      	b.n	8003ac0 <__sflush_r+0x1c>
 8003b64:	690f      	ldr	r7, [r1, #16]
 8003b66:	2f00      	cmp	r7, #0
 8003b68:	d0a9      	beq.n	8003abe <__sflush_r+0x1a>
 8003b6a:	0793      	lsls	r3, r2, #30
 8003b6c:	680e      	ldr	r6, [r1, #0]
 8003b6e:	bf08      	it	eq
 8003b70:	694b      	ldreq	r3, [r1, #20]
 8003b72:	600f      	str	r7, [r1, #0]
 8003b74:	bf18      	it	ne
 8003b76:	2300      	movne	r3, #0
 8003b78:	eba6 0807 	sub.w	r8, r6, r7
 8003b7c:	608b      	str	r3, [r1, #8]
 8003b7e:	f1b8 0f00 	cmp.w	r8, #0
 8003b82:	dd9c      	ble.n	8003abe <__sflush_r+0x1a>
 8003b84:	6a21      	ldr	r1, [r4, #32]
 8003b86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b88:	4643      	mov	r3, r8
 8003b8a:	463a      	mov	r2, r7
 8003b8c:	4628      	mov	r0, r5
 8003b8e:	47b0      	blx	r6
 8003b90:	2800      	cmp	r0, #0
 8003b92:	dc06      	bgt.n	8003ba2 <__sflush_r+0xfe>
 8003b94:	89a3      	ldrh	r3, [r4, #12]
 8003b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b9a:	81a3      	strh	r3, [r4, #12]
 8003b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba0:	e78e      	b.n	8003ac0 <__sflush_r+0x1c>
 8003ba2:	4407      	add	r7, r0
 8003ba4:	eba8 0800 	sub.w	r8, r8, r0
 8003ba8:	e7e9      	b.n	8003b7e <__sflush_r+0xda>
 8003baa:	bf00      	nop
 8003bac:	dfbffffe 	.word	0xdfbffffe

08003bb0 <_fflush_r>:
 8003bb0:	b538      	push	{r3, r4, r5, lr}
 8003bb2:	690b      	ldr	r3, [r1, #16]
 8003bb4:	4605      	mov	r5, r0
 8003bb6:	460c      	mov	r4, r1
 8003bb8:	b913      	cbnz	r3, 8003bc0 <_fflush_r+0x10>
 8003bba:	2500      	movs	r5, #0
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	bd38      	pop	{r3, r4, r5, pc}
 8003bc0:	b118      	cbz	r0, 8003bca <_fflush_r+0x1a>
 8003bc2:	6a03      	ldr	r3, [r0, #32]
 8003bc4:	b90b      	cbnz	r3, 8003bca <_fflush_r+0x1a>
 8003bc6:	f7ff fa99 	bl	80030fc <__sinit>
 8003bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f3      	beq.n	8003bba <_fflush_r+0xa>
 8003bd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003bd4:	07d0      	lsls	r0, r2, #31
 8003bd6:	d404      	bmi.n	8003be2 <_fflush_r+0x32>
 8003bd8:	0599      	lsls	r1, r3, #22
 8003bda:	d402      	bmi.n	8003be2 <_fflush_r+0x32>
 8003bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bde:	f7ff fb92 	bl	8003306 <__retarget_lock_acquire_recursive>
 8003be2:	4628      	mov	r0, r5
 8003be4:	4621      	mov	r1, r4
 8003be6:	f7ff ff5d 	bl	8003aa4 <__sflush_r>
 8003bea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bec:	07da      	lsls	r2, r3, #31
 8003bee:	4605      	mov	r5, r0
 8003bf0:	d4e4      	bmi.n	8003bbc <_fflush_r+0xc>
 8003bf2:	89a3      	ldrh	r3, [r4, #12]
 8003bf4:	059b      	lsls	r3, r3, #22
 8003bf6:	d4e1      	bmi.n	8003bbc <_fflush_r+0xc>
 8003bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bfa:	f7ff fb85 	bl	8003308 <__retarget_lock_release_recursive>
 8003bfe:	e7dd      	b.n	8003bbc <_fflush_r+0xc>

08003c00 <__swbuf_r>:
 8003c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c02:	460e      	mov	r6, r1
 8003c04:	4614      	mov	r4, r2
 8003c06:	4605      	mov	r5, r0
 8003c08:	b118      	cbz	r0, 8003c12 <__swbuf_r+0x12>
 8003c0a:	6a03      	ldr	r3, [r0, #32]
 8003c0c:	b90b      	cbnz	r3, 8003c12 <__swbuf_r+0x12>
 8003c0e:	f7ff fa75 	bl	80030fc <__sinit>
 8003c12:	69a3      	ldr	r3, [r4, #24]
 8003c14:	60a3      	str	r3, [r4, #8]
 8003c16:	89a3      	ldrh	r3, [r4, #12]
 8003c18:	071a      	lsls	r2, r3, #28
 8003c1a:	d525      	bpl.n	8003c68 <__swbuf_r+0x68>
 8003c1c:	6923      	ldr	r3, [r4, #16]
 8003c1e:	b31b      	cbz	r3, 8003c68 <__swbuf_r+0x68>
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	6922      	ldr	r2, [r4, #16]
 8003c24:	1a98      	subs	r0, r3, r2
 8003c26:	6963      	ldr	r3, [r4, #20]
 8003c28:	b2f6      	uxtb	r6, r6
 8003c2a:	4283      	cmp	r3, r0
 8003c2c:	4637      	mov	r7, r6
 8003c2e:	dc04      	bgt.n	8003c3a <__swbuf_r+0x3a>
 8003c30:	4621      	mov	r1, r4
 8003c32:	4628      	mov	r0, r5
 8003c34:	f7ff ffbc 	bl	8003bb0 <_fflush_r>
 8003c38:	b9e0      	cbnz	r0, 8003c74 <__swbuf_r+0x74>
 8003c3a:	68a3      	ldr	r3, [r4, #8]
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	60a3      	str	r3, [r4, #8]
 8003c40:	6823      	ldr	r3, [r4, #0]
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	6022      	str	r2, [r4, #0]
 8003c46:	701e      	strb	r6, [r3, #0]
 8003c48:	6962      	ldr	r2, [r4, #20]
 8003c4a:	1c43      	adds	r3, r0, #1
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d004      	beq.n	8003c5a <__swbuf_r+0x5a>
 8003c50:	89a3      	ldrh	r3, [r4, #12]
 8003c52:	07db      	lsls	r3, r3, #31
 8003c54:	d506      	bpl.n	8003c64 <__swbuf_r+0x64>
 8003c56:	2e0a      	cmp	r6, #10
 8003c58:	d104      	bne.n	8003c64 <__swbuf_r+0x64>
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	f7ff ffa7 	bl	8003bb0 <_fflush_r>
 8003c62:	b938      	cbnz	r0, 8003c74 <__swbuf_r+0x74>
 8003c64:	4638      	mov	r0, r7
 8003c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c68:	4621      	mov	r1, r4
 8003c6a:	4628      	mov	r0, r5
 8003c6c:	f000 f806 	bl	8003c7c <__swsetup_r>
 8003c70:	2800      	cmp	r0, #0
 8003c72:	d0d5      	beq.n	8003c20 <__swbuf_r+0x20>
 8003c74:	f04f 37ff 	mov.w	r7, #4294967295
 8003c78:	e7f4      	b.n	8003c64 <__swbuf_r+0x64>
	...

08003c7c <__swsetup_r>:
 8003c7c:	b538      	push	{r3, r4, r5, lr}
 8003c7e:	4b2a      	ldr	r3, [pc, #168]	; (8003d28 <__swsetup_r+0xac>)
 8003c80:	4605      	mov	r5, r0
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	460c      	mov	r4, r1
 8003c86:	b118      	cbz	r0, 8003c90 <__swsetup_r+0x14>
 8003c88:	6a03      	ldr	r3, [r0, #32]
 8003c8a:	b90b      	cbnz	r3, 8003c90 <__swsetup_r+0x14>
 8003c8c:	f7ff fa36 	bl	80030fc <__sinit>
 8003c90:	89a3      	ldrh	r3, [r4, #12]
 8003c92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c96:	0718      	lsls	r0, r3, #28
 8003c98:	d422      	bmi.n	8003ce0 <__swsetup_r+0x64>
 8003c9a:	06d9      	lsls	r1, r3, #27
 8003c9c:	d407      	bmi.n	8003cae <__swsetup_r+0x32>
 8003c9e:	2309      	movs	r3, #9
 8003ca0:	602b      	str	r3, [r5, #0]
 8003ca2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ca6:	81a3      	strh	r3, [r4, #12]
 8003ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cac:	e034      	b.n	8003d18 <__swsetup_r+0x9c>
 8003cae:	0758      	lsls	r0, r3, #29
 8003cb0:	d512      	bpl.n	8003cd8 <__swsetup_r+0x5c>
 8003cb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cb4:	b141      	cbz	r1, 8003cc8 <__swsetup_r+0x4c>
 8003cb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cba:	4299      	cmp	r1, r3
 8003cbc:	d002      	beq.n	8003cc4 <__swsetup_r+0x48>
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	f7ff fb24 	bl	800330c <_free_r>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	6363      	str	r3, [r4, #52]	; 0x34
 8003cc8:	89a3      	ldrh	r3, [r4, #12]
 8003cca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003cce:	81a3      	strh	r3, [r4, #12]
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	6063      	str	r3, [r4, #4]
 8003cd4:	6923      	ldr	r3, [r4, #16]
 8003cd6:	6023      	str	r3, [r4, #0]
 8003cd8:	89a3      	ldrh	r3, [r4, #12]
 8003cda:	f043 0308 	orr.w	r3, r3, #8
 8003cde:	81a3      	strh	r3, [r4, #12]
 8003ce0:	6923      	ldr	r3, [r4, #16]
 8003ce2:	b94b      	cbnz	r3, 8003cf8 <__swsetup_r+0x7c>
 8003ce4:	89a3      	ldrh	r3, [r4, #12]
 8003ce6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003cea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cee:	d003      	beq.n	8003cf8 <__swsetup_r+0x7c>
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	f000 f850 	bl	8003d98 <__smakebuf_r>
 8003cf8:	89a0      	ldrh	r0, [r4, #12]
 8003cfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003cfe:	f010 0301 	ands.w	r3, r0, #1
 8003d02:	d00a      	beq.n	8003d1a <__swsetup_r+0x9e>
 8003d04:	2300      	movs	r3, #0
 8003d06:	60a3      	str	r3, [r4, #8]
 8003d08:	6963      	ldr	r3, [r4, #20]
 8003d0a:	425b      	negs	r3, r3
 8003d0c:	61a3      	str	r3, [r4, #24]
 8003d0e:	6923      	ldr	r3, [r4, #16]
 8003d10:	b943      	cbnz	r3, 8003d24 <__swsetup_r+0xa8>
 8003d12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003d16:	d1c4      	bne.n	8003ca2 <__swsetup_r+0x26>
 8003d18:	bd38      	pop	{r3, r4, r5, pc}
 8003d1a:	0781      	lsls	r1, r0, #30
 8003d1c:	bf58      	it	pl
 8003d1e:	6963      	ldrpl	r3, [r4, #20]
 8003d20:	60a3      	str	r3, [r4, #8]
 8003d22:	e7f4      	b.n	8003d0e <__swsetup_r+0x92>
 8003d24:	2000      	movs	r0, #0
 8003d26:	e7f7      	b.n	8003d18 <__swsetup_r+0x9c>
 8003d28:	2000009c 	.word	0x2000009c

08003d2c <_sbrk_r>:
 8003d2c:	b538      	push	{r3, r4, r5, lr}
 8003d2e:	4d06      	ldr	r5, [pc, #24]	; (8003d48 <_sbrk_r+0x1c>)
 8003d30:	2300      	movs	r3, #0
 8003d32:	4604      	mov	r4, r0
 8003d34:	4608      	mov	r0, r1
 8003d36:	602b      	str	r3, [r5, #0]
 8003d38:	f7fc ff5e 	bl	8000bf8 <_sbrk>
 8003d3c:	1c43      	adds	r3, r0, #1
 8003d3e:	d102      	bne.n	8003d46 <_sbrk_r+0x1a>
 8003d40:	682b      	ldr	r3, [r5, #0]
 8003d42:	b103      	cbz	r3, 8003d46 <_sbrk_r+0x1a>
 8003d44:	6023      	str	r3, [r4, #0]
 8003d46:	bd38      	pop	{r3, r4, r5, pc}
 8003d48:	200002d0 	.word	0x200002d0

08003d4c <__swhatbuf_r>:
 8003d4c:	b570      	push	{r4, r5, r6, lr}
 8003d4e:	460c      	mov	r4, r1
 8003d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d54:	2900      	cmp	r1, #0
 8003d56:	b096      	sub	sp, #88	; 0x58
 8003d58:	4615      	mov	r5, r2
 8003d5a:	461e      	mov	r6, r3
 8003d5c:	da0d      	bge.n	8003d7a <__swhatbuf_r+0x2e>
 8003d5e:	89a3      	ldrh	r3, [r4, #12]
 8003d60:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003d64:	f04f 0100 	mov.w	r1, #0
 8003d68:	bf0c      	ite	eq
 8003d6a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003d6e:	2340      	movne	r3, #64	; 0x40
 8003d70:	2000      	movs	r0, #0
 8003d72:	6031      	str	r1, [r6, #0]
 8003d74:	602b      	str	r3, [r5, #0]
 8003d76:	b016      	add	sp, #88	; 0x58
 8003d78:	bd70      	pop	{r4, r5, r6, pc}
 8003d7a:	466a      	mov	r2, sp
 8003d7c:	f000 f848 	bl	8003e10 <_fstat_r>
 8003d80:	2800      	cmp	r0, #0
 8003d82:	dbec      	blt.n	8003d5e <__swhatbuf_r+0x12>
 8003d84:	9901      	ldr	r1, [sp, #4]
 8003d86:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003d8a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003d8e:	4259      	negs	r1, r3
 8003d90:	4159      	adcs	r1, r3
 8003d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d96:	e7eb      	b.n	8003d70 <__swhatbuf_r+0x24>

08003d98 <__smakebuf_r>:
 8003d98:	898b      	ldrh	r3, [r1, #12]
 8003d9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d9c:	079d      	lsls	r5, r3, #30
 8003d9e:	4606      	mov	r6, r0
 8003da0:	460c      	mov	r4, r1
 8003da2:	d507      	bpl.n	8003db4 <__smakebuf_r+0x1c>
 8003da4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003da8:	6023      	str	r3, [r4, #0]
 8003daa:	6123      	str	r3, [r4, #16]
 8003dac:	2301      	movs	r3, #1
 8003dae:	6163      	str	r3, [r4, #20]
 8003db0:	b002      	add	sp, #8
 8003db2:	bd70      	pop	{r4, r5, r6, pc}
 8003db4:	ab01      	add	r3, sp, #4
 8003db6:	466a      	mov	r2, sp
 8003db8:	f7ff ffc8 	bl	8003d4c <__swhatbuf_r>
 8003dbc:	9900      	ldr	r1, [sp, #0]
 8003dbe:	4605      	mov	r5, r0
 8003dc0:	4630      	mov	r0, r6
 8003dc2:	f7ff fb0f 	bl	80033e4 <_malloc_r>
 8003dc6:	b948      	cbnz	r0, 8003ddc <__smakebuf_r+0x44>
 8003dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dcc:	059a      	lsls	r2, r3, #22
 8003dce:	d4ef      	bmi.n	8003db0 <__smakebuf_r+0x18>
 8003dd0:	f023 0303 	bic.w	r3, r3, #3
 8003dd4:	f043 0302 	orr.w	r3, r3, #2
 8003dd8:	81a3      	strh	r3, [r4, #12]
 8003dda:	e7e3      	b.n	8003da4 <__smakebuf_r+0xc>
 8003ddc:	89a3      	ldrh	r3, [r4, #12]
 8003dde:	6020      	str	r0, [r4, #0]
 8003de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de4:	81a3      	strh	r3, [r4, #12]
 8003de6:	9b00      	ldr	r3, [sp, #0]
 8003de8:	6163      	str	r3, [r4, #20]
 8003dea:	9b01      	ldr	r3, [sp, #4]
 8003dec:	6120      	str	r0, [r4, #16]
 8003dee:	b15b      	cbz	r3, 8003e08 <__smakebuf_r+0x70>
 8003df0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003df4:	4630      	mov	r0, r6
 8003df6:	f000 f81d 	bl	8003e34 <_isatty_r>
 8003dfa:	b128      	cbz	r0, 8003e08 <__smakebuf_r+0x70>
 8003dfc:	89a3      	ldrh	r3, [r4, #12]
 8003dfe:	f023 0303 	bic.w	r3, r3, #3
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	81a3      	strh	r3, [r4, #12]
 8003e08:	89a3      	ldrh	r3, [r4, #12]
 8003e0a:	431d      	orrs	r5, r3
 8003e0c:	81a5      	strh	r5, [r4, #12]
 8003e0e:	e7cf      	b.n	8003db0 <__smakebuf_r+0x18>

08003e10 <_fstat_r>:
 8003e10:	b538      	push	{r3, r4, r5, lr}
 8003e12:	4d07      	ldr	r5, [pc, #28]	; (8003e30 <_fstat_r+0x20>)
 8003e14:	2300      	movs	r3, #0
 8003e16:	4604      	mov	r4, r0
 8003e18:	4608      	mov	r0, r1
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	602b      	str	r3, [r5, #0]
 8003e1e:	f7fc fec2 	bl	8000ba6 <_fstat>
 8003e22:	1c43      	adds	r3, r0, #1
 8003e24:	d102      	bne.n	8003e2c <_fstat_r+0x1c>
 8003e26:	682b      	ldr	r3, [r5, #0]
 8003e28:	b103      	cbz	r3, 8003e2c <_fstat_r+0x1c>
 8003e2a:	6023      	str	r3, [r4, #0]
 8003e2c:	bd38      	pop	{r3, r4, r5, pc}
 8003e2e:	bf00      	nop
 8003e30:	200002d0 	.word	0x200002d0

08003e34 <_isatty_r>:
 8003e34:	b538      	push	{r3, r4, r5, lr}
 8003e36:	4d06      	ldr	r5, [pc, #24]	; (8003e50 <_isatty_r+0x1c>)
 8003e38:	2300      	movs	r3, #0
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	4608      	mov	r0, r1
 8003e3e:	602b      	str	r3, [r5, #0]
 8003e40:	f7fc fec1 	bl	8000bc6 <_isatty>
 8003e44:	1c43      	adds	r3, r0, #1
 8003e46:	d102      	bne.n	8003e4e <_isatty_r+0x1a>
 8003e48:	682b      	ldr	r3, [r5, #0]
 8003e4a:	b103      	cbz	r3, 8003e4e <_isatty_r+0x1a>
 8003e4c:	6023      	str	r3, [r4, #0]
 8003e4e:	bd38      	pop	{r3, r4, r5, pc}
 8003e50:	200002d0 	.word	0x200002d0

08003e54 <_init>:
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	bf00      	nop
 8003e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5a:	bc08      	pop	{r3}
 8003e5c:	469e      	mov	lr, r3
 8003e5e:	4770      	bx	lr

08003e60 <_fini>:
 8003e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e62:	bf00      	nop
 8003e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e66:	bc08      	pop	{r3}
 8003e68:	469e      	mov	lr, r3
 8003e6a:	4770      	bx	lr
